{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/App.svelte",
    "../node_modules/svelte-select/src/Select.svelte",
    "../src/Chart.svelte",
    "../node_modules/svelte-select/src/List.svelte",
    "../node_modules/svelte-select/src/Item.svelte",
    "../node_modules/svelte-select/src/Selection.svelte",
    "../node_modules/svelte-select/src/MultiSelection.svelte",
    "../node_modules/svelte-select/src/VirtualList.svelte"
  ],
  "sourcesContent": [
    "<script>\n  \n  import { scaleLinear } from \"d3-scale\";\n  // import { Date } from \"d3-time\"\n  import Chart from './Chart.svelte';\n  import { onMount } from 'svelte';\n  import Select from 'svelte-select';\n  import { selectAll } from 'd3-selection'\n  import { drag } from 'd3-drag';\n  import queryString from \"query-string\";\n  import Checkbox from './Checkbox.svelte';\n  import Arrow from './Arrow.svelte';\n  import { format } from 'd3-format'\n  import { event } from 'd3-selection';\n  import katex from 'katex';\nimport {aggregatedData } from './jhu.js';\nimport {getFatalitiesToday } from './jhu.js';\nimport {getConfirmedToday } from './jhu.js';\nimport { getDays } from './jhu.js';\nimport { getMaxCases } from './jhu.js';\nimport { getCountryParameters } from './jhu.js';\nimport { getDateFromDayZero } from './jhu.js';\nimport { checkCountryListed } from './jhu.js';\n\n  const legendheight = 67 \n  function range(n){\n    return Array(n).fill().map((_, i) => i);\n  }\n  function formatNumber(num) {\n    return num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')\n  }\n  var sum = function(arr, bools){\n    var x = 0\n    for (var i = 0; i < arr.length; i++) {\n      x = x + arr[i]*(bools[i] ? 1 : 0)\n    }\n    return x\n  }\n  var Integrators = {\n    Euler    : [[1]],\n    Midpoint : [[.5,.5],[0, 1]],\n    Heun     : [[1, 1],[.5,.5]],\n    Ralston  : [[2/3,2/3],[.25,.75]],\n    K3       : [[.5,.5],[1,-1,2],[1/6,2/3,1/6]],\n    SSP33    : [[1,1],[.5,.25,.25],[1/6,1/6,2/3]],\n    SSP43    : [[.5,.5],[1,.5,.5],[.5,1/6,1/6,1/6],[1/6,1/6,1/6,1/2]],\n    RK4      : [[.5,.5],[.5,0,.5],[1,0,0,1],[1/6,1/3,1/3,1/6]],\n    RK38     : [[1/3,1/3],[2/3,-1/3,1],[1,1,-1,1],[1/8,3/8,3/8,1/8]]\n  };\n  // f is a func of time t and state y\n  // y is the initial state, t is the time, h is the timestep\n  // updated y is returned.\n  var integrate=(m,f,y,t,h)=>{\n    for (var k=[],ki=0; ki<m.length; ki++) {\n      var _y=y.slice(), dt=ki?((m[ki-1][0])*h):0;\n      for (var l=0; l<_y.length; l++) for (var j=1; j<=ki; j++) _y[l]=_y[l]+h*(m[ki-1][j])*(k[ki-1][l]);\n      k[ki]=f(t+dt,_y,dt); \n    }\n    for (var r=y.slice(),l=0; l<_y.length; l++) for (var j=0; j<k.length; j++) r[l]=r[l]+h*(k[j][l])*(m[ki-1][j]);\n    return r;\n  }\n  const countries = ['Germany', 'United Kingdom', 'France'];\n\t\t\t\t\t\t\t  \n  $: country           = \"US\"\n  $: province          = \"\"\n  $: dayZero        = 45\n  $: countryData      = aggregatedData(country, province, dayZero)\n  $: fatalitiesToday     = getFatalitiesToday(country, province, dayZero)\n  $: confirmedToday      = getConfirmedToday(country, province, dayZero)\n  $: maxRealCases            = getMaxCases(country, province, dayZero)\n  $: realDataNumberOfDays = getDays(country, province, dayZero)\n  $: Time_to_death     = 32\n  $: logN              = Math.log(80e6)\n  $: N                 = Math.exp(logN)\n  $: I0                = 1\n  $: R0                = 2.2\n  $: D_incbation       = 5.2       \n  $: D_infectious      = 2.9 \n  $: D_recovery_mild   = (14 - 2.9)  \n  $: D_recovery_severe = (31.5 - 2.9)\n  $: D_hospital_lag    = 5\n  $: D_death           = Time_to_death - D_infectious \n  $: CFR               = 0.02  \n  $: InterventionTime  = 66  \n  $: InterventionAmt   = 1\n  $: Time              = 220\n  $: Xmax              = 110000\n  $: dt                = 3\n  $: lastDayInPlot  = dt*100 //\n  $: P_SEVERE          = 0.2\n  $: duration          = 7*12*1e1\n  function checkRegion() {\n    console.log(\"Hello, Country changed\");\n    console.log(country);\n  }\n\n\n\t\t\t\t\t\t\t\t\t  \n  $: state = location.protocol + '//' + location.host + location.pathname + \"?\" + queryString.stringify({\"Time_to_death\":Time_to_death,\n\t\t\t\t\t\t\t\t\t\t\t\t\t \"logN\":logN,\n\t\t\t\t\t\t\t\t\t\t\t\t\t \"country\":country,\n\t\t\t\t\t\t\t\t\t\t\t\t\t \"dayZero\":dayZero,\n               \"I0\":I0,\n               \"R0\":R0,\n               \"D_incbation\":D_incbation,\n               \"D_infectious\":D_infectious,\n               \"D_recovery_mild\":D_recovery_mild,\n               \"D_recovery_severe\":D_recovery_severe,\n               \"CFR\":CFR,\n               \"InterventionTime\":InterventionTime,\n               \"InterventionAmt\":InterventionAmt,\n               \"D_hospital_lag\":D_hospital_lag,\n               \"P_SEVERE\": P_SEVERE})\n\n  function get_solution(dt, N, I0, R0, D_incbation, D_infectious, D_recovery_mild, D_hospital_lag, D_recovery_severe, D_death, P_SEVERE, CFR, InterventionTime, InterventionAmt, duration) {\n    var interpolation_steps = 40\n    var steps = 110*interpolation_steps\n    var dt = dt/interpolation_steps\n    var sample_step = interpolation_steps\n    var method = Integrators[\"RK4\"]\n    function f(t, x){\n      // SEIR ODE\n      if (t > InterventionTime && t < InterventionTime + duration){\n        var beta = (InterventionAmt)*R0/(D_infectious)\n      } else if (t > InterventionTime + duration) {\n        var beta = 0.5*R0/(D_infectious)        \n      } else {\n        var beta = R0/(D_infectious)\n      }\n      var a     = 1/D_incbation\n      var gamma = 1/D_infectious\n      \n      var S        = x[0] // Susectable\n      var E        = x[1] // Exposed\n      var I        = x[2] // Infectious \n      var Mild     = x[3] // Recovering (Mild)     \n      var Severe   = x[4] // Recovering (Severe at home)\n      var Severe_H = x[5] // Recovering (Severe in hospital)\n      var Fatal    = x[6] // Recovering (Fatal)\n      var R_Mild   = x[7] // Recovered\n      var R_Severe = x[8] // Recovered\n      var R_Fatal  = x[9] // Dead\n      var p_severe = P_SEVERE\n      var p_fatal  = CFR\n      var p_mild   = 1 - P_SEVERE - CFR\n      var dS        = -beta*I*S\n      var dE        =  beta*I*S - a*E\n      var dI        =  a*E - gamma*I\n      var dMild     =  p_mild*gamma*I   - (1/D_recovery_mild)*Mild\n      var dSevere   =  p_severe*gamma*I - (1/D_hospital_lag)*Severe\n      var dSevere_H =  (1/D_hospital_lag)*Severe - (1/D_recovery_severe)*Severe_H\n      var dFatal    =  p_fatal*gamma*I  - (1/D_death)*Fatal\n      var dR_Mild   =  (1/D_recovery_mild)*Mild\n      var dR_Severe =  (1/D_recovery_severe)*Severe_H\n      var dR_Fatal  =  (1/D_death)*Fatal\n      //      0   1   2   3      4        5          6       7        8          9\n      return [dS, dE, dI, dMild, dSevere, dSevere_H, dFatal, dR_Mild, dR_Severe, dR_Fatal]\n    }\n    var v = [1, 0, I0/(N-I0), 0, 0, 0, 0, 0, 0, 0]\n    var t = 0\n    var P  = []\n    var TI = []\n    var Iters = []\n      while (steps--) {\n\t  // It may be possible to shift the start of the simulation here. However it is probably\n\t  // a better idea to shift the JHU data.\n\t  \n\t  // if ((steps > 30*interpolation_steps)) {// start simulation at later stage.\n      if ((steps+1) % (sample_step) == 0) {\n            //    Dead   Hosspital          Recovered        Infected   Exposed\n        P.push([ N*v[9], N*(v[5]+v[6]),  N*(v[7] + v[8]), N*v[2],    N*v[1] ])\n        Iters.push(v)\n        TI.push(N*(1-v[0]))\n        // console.log((v[0] + v[1] + v[2] + v[3] + v[4] + v[5] + v[6] + v[7] + v[8] + v[9]))\n        // console.log(v[0] , v[1] , v[2] , v[3] , v[4] , v[5] , v[6] , v[7] , v[8] , v[9])\n      }\n\t  //} else {\n\t    //  P.push([0, 0, 0, 0, 0])\n\t    //  TI.push(0)\n\t  //}\n\n\t  \n      v =integrate(method,f,v,t,dt); \n      t+=dt\n    }\n    return {\"P\": P, \n            \"deaths\": N*v[6], \n            \"total\": 1-v[0],\n            \"total_infected\": TI,\n            \"Iters\":Iters,\n            \"dIters\": f}\n  }\n\nfunction setInterventionAmt(value) {\n    InterventionAmt = value;\n    console.log(\"InterventionAmt: \" + value);\n}\n\n  function max(P, checked) {\n    return P.reduce((max, b) => Math.max(max, sum(b, checked) ), sum(P[0], checked) )\n  }\n  $: Sol            = get_solution(dt, N, I0, R0, D_incbation, D_infectious, D_recovery_mild, D_hospital_lag, D_recovery_severe, D_death, P_SEVERE, CFR, InterventionTime, InterventionAmt, duration)\n  $: P              = Sol[\"P\"].slice(0,100)  // only plot first 100 elements of the run. \n  $: timestep       = dt\n  $: tmax           = dt*100\n  $: deaths         = Sol[\"deaths\"]\n  $: total          = Sol[\"total\"]\n  $: total_infected = Sol[\"total_infected\"].slice(0,100)\n  $: Iters          = Sol[\"Iters\"]\n  $: dIters         = Sol[\"dIters\"]\n    $: Pmax           = max(P, checked) \n$: lock           = false\n$: totalDeaths = P[99][0]\n  // use the original colors for the JHU data\n  var colorsJHU = [ \"#386cb0\", \"#8da0cb\", \"#4daf4a\", \"#f0027f\", \"#fdc086\"]\n\n  // for the simulated data use the same colors, but with half the saturation for infected / deaths\n  var colors = [ \"#748eb0\", \"#8da0cb\", \"#4daf4a\", \"#f078b8\", \"#fdc086\"]\n\n\n  var Plock = 1\n  var drag_y = function (){\n    var dragstarty = 0\n    var Pmaxstart = 0\n    var dragstarted = function (d) {\n      dragstarty = event.y  \n      Pmaxstart  = Pmax\n    }\n    var dragged = function (d) {\n      Pmax = Math.max( (Pmaxstart*(1 + (event.y - dragstarty)/500)), 10)\n    }\n    return drag().on(\"drag\", dragged).on(\"start\", dragstarted)\n  }\n  var drag_x = function (){\n    var dragstartx = 0\n    var dtstart = 0\n    var Pmaxstart = 0\n    var dragstarted = function (d) {\n      dragstartx = event.x\n      dtstart  = dt\n      Plock = Pmax\n      lock = true\n    }\n    var dragged = function (d) {\n      dt = dtstart - 0.0015*(event.x - dragstartx)\n    }\n    var dragend = function (d) {\n      lock = false\n    }\n    return drag().on(\"drag\", dragged).on(\"start\", dragstarted).on(\"end\", dragend)\n  }\n  var drag_intervention = function (){\n    var dragstarty = 0\n    var InterventionTimeStart = 0\n    var dragstarted = function (d) {\n      dragstarty = event.x  \n      InterventionTimeStart = InterventionTime\n      Plock = Pmax\n      lock = true\n    }\n    var dragged = function (d) {\n      // InterventionTime = Math.max( (*(1 + (event.x - dragstarty)/500)), 10)\n      // console.log(event.x)\n      InterventionTime = Math.min(tmax-1, Math.max(0, InterventionTimeStart + xScaleTimeInv(event.x - dragstarty)))\n    }\n    var dragend = function (d) {\n      lock = false\n    }\n    return drag().on(\"drag\", dragged).on(\"start\", dragstarted).on(\"end\", dragend)\n  }\n  var drag_intervention_end = function (){\n    var dragstarty = 0\n    var durationStart = 0\n    var dragstarted = function (d) {\n      dragstarty = event.x  \n      durationStart = duration\n      Plock = Pmax\n      lock = true\n    }\n    var dragged = function (d) {\n      // InterventionTime = Math.max( (*(1 + (event.x - dragstarty)/500)), 10)\n      // console.log(event.x)\n      duration = Math.min(tmax-1, Math.max(0, durationStart + xScaleTimeInv(event.x - dragstarty)))\n    }\n    var dragend = function (d) {\n      lock = false\n    }\n    return drag().on(\"drag\", dragged).on(\"start\", dragstarted).on(\"end\", dragend)\n  }\n  $: parsed = \"\";\n  onMount(async () => {\n    var drag_callback_y = drag_y()\n    drag_callback_y(selectAll(\"#yAxisDrag\"))\n    var drag_callback_x = drag_x()\n    drag_callback_x(selectAll(\"#xAxisDrag\"))\n    var drag_callback_intervention = drag_intervention()\n    // drag_callback_intervention(selectAll(\"#interventionDrag\"))\n    drag_callback_intervention(selectAll(\"#dottedline\"))\n    // var drag_callback_intervention_end = drag_intervention_end()\n    // drag_callback_intervention_end(selectAll(\"#dottedline2\"))\n    if (typeof window !== 'undefined') {\n\tparsed = queryString.parse(window.location.search)\n\tif (!(parsed.country === undefined)) {country = parsed.country}\n\tif (!(parsed.province === undefined)) {province = parsed.province}\n\t\n\n\tif (checkCountryListed(country,province)) {\n\t\t// now set values to country values from dataBase\n\t    logN = getCountryParameters(country, province, \"logN\")\n\t    dayZero = getCountryParameters(country, province, \"dayZero\")\n\t    R0 = getCountryParameters(country, province, \"R0\")\n\t    InterventionTime = getCountryParameters(country, province, \"InterventionTime\")\n\t}\n\n\t\n\tif (!(parsed.logN === undefined)) {logN = parsed.logN}\n\tif (!(parsed.country === undefined)) {country = parsed.country}\n\tif (!(parsed.dayZero === undefined)) {dayZero = parseInt(parsed.dayZero)}\n      if (!(parsed.I0 === undefined)) {I0 = parseFloat(parsed.I0)}\n      if (!(parsed.R0 === undefined)) {R0 = parseFloat(parsed.R0)}\n      if (!(parsed.D_incbation === undefined)) {D_incbation = parseFloat(parsed.D_incbation)}\n      if (!(parsed.D_infectious === undefined)) {D_infectious = parseFloat(parsed.D_infectious)}\n      if (!(parsed.D_recovery_mild === undefined)) {D_recovery_mild = parseFloat(parsed.D_recovery_mild)}\n      if (!(parsed.D_recovery_severe === undefined)) {D_recovery_severe = parseFloat(parsed.D_recovery_severe)}\n      if (!(parsed.CFR === undefined)) {CFR = parseFloat(parsed.CFR)}\n      if (!(parsed.InterventionTime === undefined)) {InterventionTime = parseFloat(parsed.InterventionTime)}\n      if (!(parsed.InterventionAmt === undefined)) {InterventionAmt = parseFloat(parsed.InterventionAmt)}\n      if (!(parsed.D_hospital_lag === undefined)) {D_hospital_lag = parseFloat(parsed.D_hospital_lag)}\n      if (!(parsed.P_SEVERE === undefined)) {P_SEVERE = parseFloat(parsed.P_SEVERE)}\n    }\n  });\n  function lock_yaxis(){\n    Plock = Pmax\n    lock  = true\n  }\n  function unlock_yaxis(){\n    lock = false\n  }\n  const padding = { top: 20, right: 0, bottom: 20, left: 25 };\n  let width  = 750;\n  let height = 400;\n  $: xScaleTime = scaleLinear()\n    .domain([0, tmax])\n    .range([padding.left, width - padding.right]);\n  $: xScaleTimeInv = scaleLinear()\n    .domain([0, width])\n    .range([0, tmax]);\n  $: indexToTime = scaleLinear()\n    .domain([0, P.length])\n    .range([0, tmax])\n  window.addEventListener('mouseup', unlock_yaxis);\n  $: checked = [true, false, false, true, false]\n    $: checkedReal = [checked[0], checked[2], checked[3]] // whehter to show deaths, recovered and confirmed of real world cases\n\n  $: active  = 0\n  $: active_ = active >= 0 ? active : Iters.length - 1\n  var Tinc_s = \"\\\\color{#CCC}{T^{-1}_{\\\\text{inc}}} \"\n  var Tinf_s = \"\\\\color{#CCC}{T^{-1}_{\\\\text{inf}}}\"\n  var Rt_s   = \"\\\\color{#CCC}{\\\\frac{\\\\mathcal{R}_{t}}{T_{\\\\text{inf}}}} \"\n  $: ode_eqn = katex.renderToString(\"\\\\frac{d S}{d t}=-\" +Rt_s +\"\\\\cdot IS,\\\\qquad \\\\frac{d E}{d t}=\" +Rt_s +\"\\\\cdot IS- \" + Tinc_s + \" E,\\\\qquad \\\\frac{d I}{d t}=\" + Tinc_s + \"E-\" + Tinf_s+ \"I, \\\\qquad \\\\frac{d R}{d t}=\" + Tinf_s+ \"I\", {\n    throwOnError: false,\n    displayMode: true,\n    colorIsTextColor: true\n  });\n  function math_inline(str) {\n    return katex.renderToString(str, {\n    throwOnError: false,\n    displayMode: false,\n    colorIsTextColor: true\n    });\n  }\n  function math_display(str) {\n    return katex.renderToString(str, {\n    throwOnError: false,\n    displayMode: true,\n    colorIsTextColor: true\n    });\n  }\n  \n  $: p_num_ind = 40\n  $: get_d = function(i){\n    return dIters(indexToTime(i), Iters[i])\n  }\n  function get_milestones(P){\n    function argmax(x, index) {\n      return x.map((x, i) => [x[index], i]).reduce((r, a) => (a[0] > r[0] ? a : r))[1];\n    }\n     //    Dead   Hospital          Recovered        Infected   Exposed\n    var milestones = []\n    for (var i = 0; i < P.length; i++) {\n      if (P[i][0] >= 0.5) {\n        milestones.push([i*dt, \"First death\"])\n        break\n      }\n    }\n    var i = argmax(P, 1)\n    milestones.push([i*dt, \"Peak: \" + format(\",\")(Math.round(P[i][1])) + \" hospitalizations\"])\n    return milestones\n  }\n  $: milestones = get_milestones(P)\n$: log = false\n$: showJHU = true\n$: showSIM = false\n</script>\n\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/katex@0.11.1/dist/katex.css\" integrity=\"sha384-bsHo4/LA+lkZv61JspMDQB9QP1TtO4IgOf2yYS+J6VdAYLVyx1c3XKcsHh0Vy8Ws\" crossorigin=\"anonymous\">\n\n<style>\n  .small { font: italic 6px Source Code Pro; }\n  @import url('https://fonts.googleapis.com/css?family=Source+Code+Pro&display=swap');\n  h2 {\n    margin: auto;\n    width: 950px;\n    font-size: 40px;\n    padding-top: 20px;\n    padding-bottom: 20px;\n    font-weight: 300;\n    font-family: nyt-franklin,helvetica,arial,sans-serif;\n    padding-bottom: 30px\n  }\n  .center {\n    margin: auto;\n    width: 950px;\n    padding-bottom: 20px;\n    font-weight: 300;\n    font-family: nyt-franklin,helvetica,arial,sans-serif;\n    color:#666;\n    font-size: 16.5px;\n    text-align: justify;\n    line-height: 24px\n  }\n  .ack {\n    margin: auto;\n    width: 950px;\n    padding-bottom: 20px;\n    font-weight: 300;\n    font-family: nyt-franklin,helvetica,arial,sans-serif;\n    color:#333;\n    font-size: 13px;\n  }\n  .row {\n    font-family: nyt-franklin,helvetica,arial,sans-serif;\n    margin: auto;\n    display: flex;\n    width: 948px;\n    font-size: 13px;\n  }\n  .caption {\n    font-family: nyt-franklin,helvetica,arial,sans-serif;\n    font-size: 13px;    \n  }\n  .column {\n    flex: 158px;\n    padding: 0px 5px 5px 0px;\n    margin: 0px 5px 5px 5px;\n    /*border-top: 2px solid #999*/\n  }\n  .minorTitle {\n    font-family: nyt-franklin,helvetica,arial,sans-serif;\n    margin: auto;\n    display: flex;\n    width: 950px;\n    font-size: 17px;\n    color: #666;\n  }\n  .minorTitleColumn{\n    flex: 60px;\n    padding: 3px;\n    border-bottom: 2px solid #999;\n  }\n  .paneltext{\n    position:relative;\n    height:130px;\n  }\n  .paneltitle{\n    color:#777; \n    line-height: 17px; \n    padding-bottom: 4px;\n    font-weight: 700;\n    font-family: nyt-franklin,helvetica,arial,sans-serif;\n  }\n  .paneldesc{\n    color:#888; \n    text-align: left;\n    font-weight: 300;\n  }\n  .slidertext{\n    color:#555; \n    line-height: 7px; \n    padding-bottom: 0px; \n    padding-top: 7px;\n    font-family: nyt-franklin,helvetica,arial,sans-serif;\n    font-family: 'Source Code Pro', monospace;\n    font-size: 10px;\n    text-align: right;\n    /*font-weight: bold*/\n  }\n    \n  .range {\n    width: 100%;\n  }\n  .chart {\n    width: 100%;\n    margin: 0 auto;\n    padding-top:0px;\n    padding-bottom:10px;\n  }\n  .legend {\n    color: #888;\n    font-family: Helvetica, Arial;\n    font-size: .725em;\n    font-weight: 200;\n    height: 100px;\n    left: 20px;\n    top: 4px;\n    position: absolute;\n  }\n  .legendtitle {\n    color:#777; \n    font-size:13px;\n    padding-bottom: 6px;\n    font-weight: 600;\n    font-family: nyt-franklin,helvetica,arial,sans-serif;\n  }\n  .legendtext{\n    color:#888; \n    font-size:13px;\n    padding-bottom: 5px;\n    font-weight: 300;\n    font-family: nyt-franklin,helvetica,arial,sans-serif;\n    line-height: 14px;\n  }\n  .legendtextnum{\n    color:#888; \n    font-size:13px;\n    padding-bottom: 5px;\n    font-weight: 300;\n    line-height: 12px;\n    font-family: nyt-franklin,helvetica,arial,sans-serif;\n    left: -3px;\n    position: relative;\n  }\n  .tick {\n    font-family: nyt-franklin,helvetica,arial,sans-serif;\n    font-size: .725em;\n    font-weight: 200;\n    font-size: 13px\n  }\n  td { \n    text-align: left;\n    font-family: nyt-franklin,helvetica,arial,sans-serif;\n    border-bottom: 1px solid #DDD;\n    border-collapse: collapse;\n    padding: 3px;\n    /*font-size: 14px;*/\n  }\n  tr {\n    border-collapse: collapse;\n    border-spacing: 15px;\n  }\n\n    .countrybox {\n      background-color: white;\n\topacity: 0.7;\n\tpadding: 5px;\n  }\n\n\n    .country {\n  font-family: nyt-franklin,helvetica,arial,sans-serif;\n      font-size: 14pt;\n      color: #666;\n      width: 250px;\n  }\n\n  .population {\n\tfont-family: nyt-franklin,helvetica,arial,sans-serif;\n      color: #888888;\n      font-size: 10pt;\n      margin-bottom: 5pt;\n    }\n\n  .fatalities {\n  font-family: nyt-franklin,helvetica,arial,sans-serif;\n  color: #386cb0;\n  width: 250px;\n  }\n\n    .confirmed {\n  font-family: nyt-franklin,helvetica,arial,sans-serif;\n  color: #f0027f;\n\twidth: 250px;\n\topacity: 1;\n    }\n\n       \nbutton.strategy{\n display:inline-block;\n padding:0.35em 1.2em;\n border:0.15em solid #aaa;\n margin-right: 5px;\n box-sizing: border-box;\n text-decoration:none;\n font-family: nyt-franklin,helvetica,arial,sans-serif;\n font-size: 12pt;\n font-weight:300;\n     color:#444;\n text-align:center;\n     transition: all 0.2s;\n      display:block;\n      margin:0.4em auto;\n    border-radius:2px;\n    height: 25px;\n    width: 85px;\n}\n\nbutton.strategy:hover{\n    background-color:#bbb;\n}\n\n\n\n  .eqn {\n    font-family: nyt-franklin,helvetica,arial,sans-serif;\n    margin: auto;\n    display: flex;\n    flex-flow: row wrap;\n    width: 950px;\n    column-count: 4;\n    font-weight: 300;\n    color:#666;\n    font-size: 16.5px;\n  }\n  \n  th { font-weight: 500; text-align: left; padding-bottom: 5px; vertical-align: text-top;     border-bottom: 1px solid #DDD; }\n  a:link { color: grey; }\n  a:visited { color: grey; }\n</style>\n\n<h2>Epidemic Calculator</h2>\n\n<div class=\"chart\" style=\"display: flex; max-width: 1120px\">\n\n  <div style=\"flex: 0 0 270px; width:270px;\">\n    <div style=\"position:relative; top:48px; right:-115px\">\n      <div class=\"legendtext\" style=\"position:absolute; left:-16px; top:-34px; width:50px; height: 100px; font-size: 13px; line-height:16px; font-weight: normal; text-align: center\"><b>Day</b><br> {Math.round(indexToTime(active_))}</div>\n\n      <!-- Susceptible -->\n      <div style=\"position:absolute; left:0px; top:0px; width: 180px; height: 100px\">\n\n        <span style=\"pointer-events: none\"><Checkbox color=\"#CCC\"/></span>\n        <Arrow height=\"41\"/>\n\n        <div class=\"legend\" style=\"position:absolute;\">\n          <div class=\"legendtitle\">Susceptible</div>\n          <div style=\"padding-top: 5px; padding-bottom: 1px\">\n          <div class=\"legendtextnum\"><span style=\"font-size:12px; padding-right:3px; color:#CCC\">∑</span> <i>{formatNumber(Math.round(N*Iters[active_][0]))} \n                                  ({ (100*Iters[active_][0]).toFixed(2) }%)</i></div>\n          <div class=\"legendtextnum\"><span style=\"font-size:12px; padding-right:2px; color:#CCC\">Δ</span> <i>{formatNumber(Math.round(N*get_d(active_)[0]))} / day</i>\n                                 </div>\n          </div>\n        </div>\n          <div class=\"legendtext\" style=\"text-align: right; width:105px; left:-111px; top: 4px; position:relative;\">Population not immune to disease.</div>\n\n      </div>\n\n      <!-- Exposed -->\n      <div style=\"position:absolute; left:0px; top:{legendheight*1}px; width: 180px; height: 100px\">\n\n        <Checkbox color=\"{colors[4]}\" bind:checked={checked[4]}/>      \n        <Arrow height=\"41\"/>\n\n        <div class=\"legend\" style=\"position:absolute;\">\n          <div class=\"legendtitle\">Exposed</div>\n\n          <div style=\"padding-top: 5px; padding-bottom: 1px\">\n          <div class=\"legendtextnum\"><span style=\"font-size:12px; padding-right:3px; color:#CCC\">∑</span> <i>{formatNumber(Math.round(N*Iters[active_][1]))} \n                                  ({ (100*Iters[active_][1]).toFixed(2) }%)</div>\n          <div class=\"legendtextnum\"><span style=\"font-size:12px; padding-right:2px; color:#CCC\">Δ</span> <i>{formatNumber(Math.round(N*get_d(active_)[1])) } / day</i>\n                                 </div>\n          </div>\n        </div>\n        <div class=\"legendtext\" style=\"text-align: right; width:105px; left:-111px; top: 4px; position:relative;\">Population currently in incubation.</div>\n\n      </div>\n\n      <!-- Infected -->\n      <div style=\"position:absolute; left:0px; top:{legendheight*2}px; width: 180px; height: 100px\">\n\n        <Checkbox color=\"{colors[3]}\" bind:checked={checked[3]}/>\n        <Arrow height=\"41\"/>   \n\n        <div class=\"legend\" style=\"position:absolute;\">\n          <div class=\"legendtitle\">Infected</div>\n          <div style=\"padding-top: 5px; padding-bottom: 1px\">\n          <div class=\"legendtextnum\"><span style=\"font-size:12px; padding-right:3px; color:#CCC\">∑</span> <i>{formatNumber(Math.round(N*Iters[active_][2]))} \n                                  ({ (100*Iters[active_][2]).toFixed(2) }%)</div>\n          <div class=\"legendtextnum\"><span style=\"font-size:12px; padding-right:2px; color:#CCC\">Δ</span> <i>{formatNumber(Math.round(N*get_d(active_)[2])) } / day</i>\n                                 </div>\n          </div>\n        </div>\n        <div class=\"legendtext\" style=\"text-align: right; width:105px; left:-111px; top: 4px; position:relative;\">Number of infections <i>actively</i> circulating.</div>\n\n\n      </div>\n\n      <!-- Removed -->\n      <div style=\"position:absolute; left:0px; top:{legendheight*3}px; width: 180px; height: 100px\">\n\n        <Checkbox color=\"grey\" callback={(s) => {checked[1] = s; checked[0] = s; checked[2] = s} }/>\n        <Arrow height=\"56\" arrowhead=\"\" dasharray=\"3 2\"/>\n\n        <div class=\"legend\" style=\"position:absolute;\">\n          <div class=\"legendtitle\">Removed</div>\n          <div style=\"padding-top: 10px; padding-bottom: 1px\">\n          <div class=\"legendtextnum\"><span style=\"font-size:12px; padding-right:3px; color:#CCC\">∑</span> <i>{formatNumber(Math.round(N* (1-Iters[active_][0]-Iters[active_][1]-Iters[active_][2])+I0 ))} \n                                  ({ ((100*(1-Iters[active_][0]-Iters[active_][1]-Iters[active_][2]-I0/N))).toFixed(2) }%)</div>\n          <div class=\"legendtextnum\"><span style=\"font-size:12px; padding-right:2px; color:#CCC\">Δ</span> <i>{formatNumber(Math.round(N*(get_d(active_)[3]+get_d(active_)[4]+get_d(active_)[5]+get_d(active_)[6]+get_d(active_)[7]) )) } / day</i>\n                                 </div>\n          </div>\n        </div>\n        <div class=\"legendtext\" style=\"text-align: right; width:105px; left:-111px; top: 4x; position:relative;\">Population no longer infectious due to isolation or immunity.</div>\n\n      </div>\n\n      <!-- Recovered -->\n      <div style=\"position:absolute; left:0px; top:{legendheight*4+14-3}px; width: 180px; height: 100px\">\n        <Checkbox color=\"{colors[2]}\" bind:checked={checked[2]}/>\n        <Arrow height=\"23\" arrowhead=\"\" dasharray=\"3 2\"/>\n        <div class=\"legend\" style=\"position:absolute;\">\n          <div class=\"legendtitle\">Recovered</div>\n\n          <div style=\"padding-top: 3px; padding-bottom: 1px\">\n          <div class=\"legendtextnum\"><span style=\"font-size:12px; padding-right:3px; color:#CCC\">∑</span> <i>{formatNumber(Math.round(N*(Iters[active_][7]+Iters[active_][8]) ))} \n                                  ({ (100*(Iters[active_][7]+Iters[active_][8])).toFixed(2) }%)</div>\n          </div>\n        </div>\n        <div class=\"legendtext\" style=\"text-align: right; width:105px; left:-111px; top: 8px; position:relative;\">Full recoveries.</div>\n\n      </div>\n\n      <!-- Hospitalized -->\n      <div style=\"position:absolute; left:0px; top:{legendheight*4+57}px; width: 180px; height: 100px\">\n        <Arrow height=\"43\" arrowhead=\"\" dasharray=\"3 2\"/>\n        <Checkbox color=\"{colors[1]}\" bind:checked={checked[1]}/>\n        <div class=\"legend\" style=\"position:absolute;\">\n          <div class=\"legendtitle\">Hospitalized</div>\n          <div style=\"padding-top: 3px; padding-bottom: 1px\">\n          <div class=\"legendtextnum\"><span style=\"font-size:12px; padding-right:3px; color:#CCC\">∑</span> <i>{formatNumber(Math.round(N*(Iters[active_][5]+Iters[active_][6]) ))} \n                                  ({ (100*(Iters[active_][5]+Iters[active_][6])).toFixed(2) }%)</div>\n          </div>\n          <div class=\"legendtextnum\"><span style=\"font-size:12px; padding-right:2px; color:#CCC\">Δ</span> <i>{formatNumber(Math.round(N*(get_d(active_)[5]+get_d(active_)[6]))) } / day</i>\n                                 </div>\n        </div>\n        <div class=\"legendtext\" style=\"text-align: right; width:105px; left:-111px; top: 10px; position:relative;\">Active hospitalizations.</div>\n\n      </div>\n\n      <div style=\"position:absolute; left:0px; top:{legendheight*4 + 120+2}px; width: 180px; height: 100px\">\n        <Arrow height=\"40\" arrowhead=\"\" dasharray=\"3 2\"/>\n\n        <Checkbox color=\"{colors[0]}\" bind:checked={checked[0]}/>\n\n        <div class=\"legend\" style=\"position:absolute;\">\n          <div class=\"legendtitle\">Fatalities</div>\n          <div style=\"padding-top: 3px; padding-bottom: 1px\">          \n          <div class=\"legendtextnum\"><span style=\"font-size:12px; padding-right:3px; color:#CCC\">∑</span> <i>{formatNumber(Math.round(N*Iters[active_][9]))} \n                                  ({ (100*Iters[active_][9]).toFixed(2) }%)</div>\n          <div class=\"legendtextnum\"><span style=\"font-size:12px; padding-right:2px; color:#CCC\">Δ</span> <i>{formatNumber(Math.round(N*get_d(active_)[9])) } / day</i>\n                                 </div>\n          </div>\n        </div>\n        <div class=\"legendtext\" style=\"text-align: right; width:105px; left:-111px; top: 10px; position:relative;\">Deaths.</div>\n      </div>\n    </div>\n  </div>\n\n  <div style=\"flex: 0 0 890px; width:890px; height: {height+128}px; position:relative;\">\n\n\n{#await maxRealCases then mydata}\n\n\n    <div style=\"position:relative; top:60px; left: 10px\">\n    <Chart bind:checked={checked}\n             bind:active={active}\n\t     country={country}\n             province={province}\n             countryData = {countryData}\n             lastDayInPlot = {lastDayInPlot}\n             maxRealCases = {maxRealCases}\n             y = {P} \n             xmax = {Xmax} \n             total_infected = {total_infected} \n             deaths = {deaths} \n             total = {total} \n             timestep={timestep}\n             tmax={tmax}\n             N={N}\n             ymax = {Math.max(Pmax, mydata)}\n             InterventionTime={InterventionTime}\n             colors={colors}\n             colorsJHU = {colorsJHU}\n             log={!log}\n             showJHU={showJHU}\n             showSIM={showSIM}/>\n    </div>\n\n{/await}\n\n\n      <div id=\"xAxisDrag\"\n           style=\"pointer-events: all;\n                  position: absolute;\n                  top:{height+80}px;\n                  left:{0}px;\n                  width:{780}px;\n                  background-color:#222;\n                  opacity: 0;\n                  height:25px;\n                  cursor:col-resize\">\n      </div>\n\n      <div id=\"yAxisDrag\"\n           style=\"pointer-events: all;\n                  position: absolute;\n                  top:{55}px;\n                  left:{0}px;\n                  width:{20}px;\n                  background-color:#222;\n                  opacity: 0;\n                  height:425px;\n                  cursor:row-resize\">\n      </div>\n\n      <!-- Intervention Line -->\n      <div style=\"position: absolute; width:{width+15}px; height: {height}px; position: absolute; top:100px; left:10px; pointer-events: none\">\n        <div id=\"dottedline\"  style=\"pointer-events: all;\n                    position: absolute;\n                    top:-38px;\n                    left:{xScaleTime(InterventionTime)}px;\n                    visibility: {(xScaleTime(InterventionTime) < (width - padding.right)) ? 'visible':'hidden'};\n                    width:2px;\n                    background-color:#FFF;\n                    border-right: 1px dashed black;\n                    pointer-events: all;\n                    cursor:col-resize;\n                    height:{height+19}px\">\n\n        <div style=\"position:absolute; opacity: 0.5; top:-5px; left:10px; width: 120px\">\n        <span style=\"font-size: 13px\">{@html math_inline(\"\\\\mathcal{R}_t=\" + (R0*InterventionAmt).toFixed(2) )}</span> ⟶ \n        </div>\n\n        {#if xScaleTime(InterventionTime) >= 100}\n          <div style=\"position:absolute; opacity: 0.5; top:-2px; left:-97px; width: 120px\">\n          <span style=\"font-size: 13px\">⟵ {@html math_inline(\"\\\\mathcal{R}_0=\" + (R0).toFixed(2) )}</span>\n          </div>      \n        {/if}\n\n        <div id=\"interventionDrag\" class=\"legendtext\" style=\"flex: 0 0 160px; width:120px; position:relative;  top:-70px; height: 60px; padding-right: 15px; left: -125px; pointer-events: all;cursor:col-resize;\" >\n          <div class=\"paneltitle\" style=\"top:9px; position: relative; text-align: right\">Intervention on day {format(\"d\")(InterventionTime)}</div>\n          <span></span><div style=\"top:9px; position: relative; text-align: right\">\n          (drag me)</div>\n          <div style=\"top:43px; left:40px; position: absolute; text-align: right; width: 20px; height:20px; opacity: 0.3\">\n            <svg width=\"20\" height=\"20\">\n              <g transform=\"rotate(90)\">\n                <g transform=\"translate(0,-20)\">\n                  <path d=\"M2 11h16v2H2zm0-4h16v2H2zm8 11l3-3H7l3 3zm0-16L7 5h6l-3-3z\"/>\n                 </g>  \n              </g>\n            </svg>\n          </div>\n        </div>\n\n\n        <div style=\"width:150px; position:relative; top:-85px; height: 80px; padding-right: 15px; left: 0px; ;cursor:col-resize; background-color: white; position:absolute\" >\n\n        </div>\n\n\n        </div>\n      </div>\n\n      <!-- Intervention Line slider -->\n      <div style=\"position: absolute; width:{width+15}px; height: {height}px; position: absolute; top:120px; left:10px; pointer-events: none\">\n        <div style=\"\n            position: absolute;\n            top:-38px;\n            left:{xScaleTime(InterventionTime)}px;\n            visibility: {(xScaleTime(InterventionTime) < (width - padding.right)) ? 'visible':'hidden'};\n            width:2px;\n            background-color:#FFF;\n            border-right: 1px dashed black;\n            cursor:col-resize;\n            height:{height}px\">\n            <div style=\"flex: 0 0 160px; width:200px; position:relative; top:-125px; left: 1px\" >\n              <div class=\"caption\" style=\"pointer-events: none; position: absolute; left:0; top:40px; width:150px; border-left: 2px solid #777; padding: 5px 7px 7px 7px; \">      \n              <div class=\"paneltext\"  style=\"height:20px; text-align: right\">\n              <div class=\"paneldesc\">to decrease transmission by<br></div>\n              </div>\n              <div style=\"pointer-events: all\">\n              <div class=\"slidertext\" on:mousedown={lock_yaxis}>{(InterventionAmt).toFixed(2)}</div>\n              <input class=\"range\" type=range bind:value={InterventionAmt} min=0 max=1 step=0.01 on:mousedown={lock_yaxis}>\n              </div>\n              </div>\n            </div>\n          </div>\n      </div>\n\n     <!------------------------------------------ -->\n     <!------------------------------------------ -->\n     <!------------------------------------------ -->\n     <!------------------------------------------ -->\n     <!------------------------------------------ -->\n     <!------------------------------------------ -->\n     <!------------------------------------------ -->\n\n          <!-- Country Specific Information -->\n     <div style=\"position:absolute; top: 50px; left: 500px; width: 300px; height: 300px;\">\n       <div style=\"position:absolute; top: 0px; left: 0px; margin: 0px 0px 5px 4px;\" class=\"countrybox\">\n\t <div class=\"country\">\n\t {#if checkCountryListed(country, province)}<img src=\"./svg/{getCountryParameters(country, province, \"flag\")}.svg\" height=\"20\" alt=\"Flag\" style=\"margin-bottom: -3px;border:1px solid #ccc\"> {/if}{country}</div>\n         <div class=\"population\">Population: {format(\",\")(Math.round(N))}</div>\n\n\t \t <div class=\"confirmed\">JHU - Confirmed Today:\n\t {#await confirmedToday then data}\n\t   {data}\n\t   {/await}\n\t </div>\n\n\t    \t <div class=\"fatalities\" style=\"margin-bottom: 5pt;\">JHU - Fatalities Today:\n\t {#await fatalitiesToday then data}\n\t   {data}\n\t   {/await}\n\t </div>\n\n   \t <div class=\"country\" style=\"margin-top:20px;margin-bottom:10px;\">Strategy</div>\n\t    <div style=\"width:100px;height:30px;\">\n\t    <div style=\"position:relative;left:0px;top:0px;\"><button class=\"strategy\" on:click={() => setInterventionAmt(1)}>Observe</button></div>\n\t    <div style=\"position:relative;left:90px;top:-25px;\"><button class=\"strategy\" on:click={() => setInterventionAmt(1/R0)}>Mitigate</button></div>\n\t    <div style=\"position:relative;left:180px;top:-50px;\"><button class=\"strategy\" on:click={() => setInterventionAmt(1/R0*0.8)}>Suppress</button></div>\n\t   </div>\n\t    \n\n   \t    <div class=\"country\" style=\"margin-top:20px;margin-bottom:10px;\">Outcome (Prognosis)</div>\n\n\t    <div class=\"confirmed\">Total Infected: {format(\",\")(Math.round(Math.max(...total_infected)))}</div> \n\n\t    <div class=\"fatalities\">Fatalities: {format(\",\")(Math.round(totalDeaths))}</div> \n       </div>\n     </div>\n\n<!-- \n      {#if xScaleTime(InterventionTime+duration) < (width - padding.right)}\n        <div id=\"dottedline2\" style=\"position: absolute; width:{width+15}px; height: {height}px; position: absolute; top:105px; left:10px; pointer-events: none;\">\n          <div style=\"\n              position: absolute;\n              top:-38px;\n              left:{xScaleTime(InterventionTime+duration)}px;\n              visibility: {(xScaleTime(InterventionTime+duration) < (width - padding.right)) ? 'visible':'hidden'};\n              width:3px;\n              background-color:white;\n              border-right: 1px dashed black;\n              cursor:col-resize;\n              opacity: 0.3;\n              pointer-events: all;\n              height:{height+13}px\">\n            <div style=\"position:absolute; opacity: 0.5; top:-10px; left:10px; width: 120px\">\n            <span style=\"font-size: 13px\">{@html math_inline(\"\\\\mathcal{R}_t=\" + (R0*InterventionAmt).toFixed(2) )}</span> ⟶ \n            </div>\n          </div>\n        </div>\n        <div style=\"position: absolute; width:{width+15}px; height: {height}px; position: absolute; top:120px; left:10px; pointer-events: none\">\n          <div style=\"\n              opacity: 0.5;\n              position: absolute;\n              top:-38px;\n              left:{xScaleTime(InterventionTime+duration)}px;\n              visibility: {(xScaleTime(InterventionTime+duration) < (width - padding.right)) ? 'visible':'hidden'};\n              width:2px;\n              background-color:#FFF;\n              cursor:col-resize;\n              height:{height}px\">\n              <div style=\"flex: 0 0 160px; width:200px; position:relative; top:-125px; left: 1px\" >\n                <div class=\"caption\" style=\"pointer-events: none; position: absolute; left:0; top:40px; width:150px; border-left: 2px solid #777; padding: 5px 7px 7px 7px; \">      \n                <div class=\"paneltext\"  style=\"height:20px; text-align: right\">\n                <div class=\"paneldesc\">decrease transmission by<br></div>\n                </div>\n                <div style=\"pointer-events: all\">\n                <div class=\"slidertext\" on:mousedown={lock_yaxis}>{(InterventionAmt).toFixed(2)}</div>\n                <input class=\"range\" type=range bind:value={InterventionAmt} min=0 max=1 step=0.01 on:mousedown={lock_yaxis}>\n                </div>\n                </div>\n              </div>\n            </div>\n        </div>\n      {/if} -->\n\n<!-- DEACTIVATE MILESTONES FOR THE TIME BEING --><!--\n      <div style=\"pointer-events: none;\n                  position: absolute;\n                  top:{height+84}px;\n                  left:{0}px;\n                  width:{780}px;\n                  opacity: 1.0;\n                  height:25px;\n                  cursor:col-resize\">\n            {#each milestones as milestone}\n              <div style=\"position:absolute; left: {xScaleTime(milestone[0])+8}px; top: -30px;\">\n                <span style=\"opacity: 0.3\"><Arrow height=30 arrowhead=\"#circle\" dasharray = \"2 1\"/></span>\n                  <div class=\"tick\" style=\"position: relative; left: 0px; top: 35px; max-width: 130px; color: #BBB; background-color: white; padding-left: 4px; padding-right: 4px\">{@html milestone[1]}</div>\n              </div>\n            {/each}\n      </div> -->\n\t     <!-- END OF MILESTONES -->\n\n         <div style=\"position:absolute; top: 80px; left: 20px; margin: 0px 0px 5px 4px;\" class=\"countrybox\">\n\t  <div class=\"tick\" style=\"color: #555; pointer-events:all; position:relative; top: 0px;\">\n             <Checkbox color=\"#AAA\" bind:checked={log}/><div style=\"position:relative; left: 20px; top: 5px;\">linear scale</div></div>\n\t     </div>\n\n\n\t              <div style=\"position:absolute; top:-20px; left: -250px; margin: 0px 0px 5px 4px;\" class=\"countrybox\">\n\t  <div class=\"tick\" style=\"color: #555; pointer-events:all; position:absolute; top: 0px;\">\n             <Checkbox color=\"#AAA\" bind:checked={showJHU}/>\n\t     <div style=\"position:relative; left: 20px; top: 5px; width:140px;\">\n             Johns Hopkins Data\n\t     </div>\n\t     </div>\n          <div class=\"tick\" style=\"color: #555; pointer-events:all; position:absolute; top: 0px; left: 170px;\">\n             <Checkbox color=\"#AAA\" bind:checked={showSIM}/><div style=\"position:relative; left: 20px; top: 5px;\">Simulation</div></div>\n    </div>\n\n   </div>\n\n</div>\n\n\n<div style=\"height:220px;\">\n  <div class=\"minorTitle\">\n    <div style=\"margin: 0px 0px 5px 4px\" class=\"minorTitleColumn\">Transmission Dynamics</div>\n    <div style=\"flex: 0 0 20; width:20px\"></div>\n    <div style=\"margin: 0px 4px 5px 0px\" class=\"minorTitleColumn\">Clinical Dynamics</div>\n  </div>\n  <div class = \"row\">\n\n    <div class=\"column\">\n      <div class=\"paneltitle\">Day Zero</div>\n\t     <div class=\"paneldesc\" style=\"height:30px\">Start of spread in {country}.<br></div>\n\t     <div class=\"slidertext\">{getDateFromDayZero(dayZero)}</div>\n      <input class=\"range\" style=\"margin-bottom: 8px\"type=range bind:value={dayZero} min={0} max=60 step=1>\n      <div class=\"paneldesc\" style=\"height:29px; border-top: 1px solid #EEE; padding-top: 10px\">Number of initial infections.<br></div>\n      <div class=\"slidertext\">{I0}</div>\n      <input class=\"range\" type=range bind:value={I0} min={1} max=10000 step=1>\n    </div>\n\n    <div class=\"column\">\n      <div class=\"paneltext\">\n      <div class=\"paneltitle\">Basic Reproduction Number {@html math_inline(\"\\\\mathcal{R}_0\")} </div>\n      <div class=\"paneldesc\">Measure of contagiousness: the number of secondary infections each infected individual produces. <br></div>\n      </div>\n      <div class=\"slidertext\">{R0}</div>\n      <input class=\"range\" type=range bind:value={R0} min=0.01 max=10 step=0.01> \n    </div>\n\n    <div class=\"column\">\n      <div class=\"paneltitle\">Transmission Times</div>\n      <div class=\"paneldesc\" style=\"height:30px\">Length of incubation period, {@html math_inline(\"T_{\\\\text{inc}}\")}.<br></div>\n      <div class=\"slidertext\">{(D_incbation).toFixed(2)} days</div>\n      <input class=\"range\" style=\"margin-bottom: 8px\"type=range bind:value={D_incbation} min={0.15} max=24 step=0.0001>\n      <div class=\"paneldesc\" style=\"height:29px; border-top: 1px solid #EEE; padding-top: 10px\">Duration patient is infectious, {@html math_inline(\"T_{\\\\text{inf}}\")}.<br></div>\n      <div class=\"slidertext\">{D_infectious} Days</div>\n      <input class=\"range\" type=range bind:value={D_infectious} min={0} max=24 step=0.01>\n    </div>\n\n    <div style=\"flex: 0 0 20; width:20px\"></div>\n\n    <div class=\"column\">\n      <div class=\"paneltitle\">Morbidity Statistics</div>\n      <div class=\"paneldesc\" style=\"height:30px\">Case fatality rate.<br></div>\n      <div class=\"slidertext\">{(CFR*100).toFixed(2)} %</div>\n      <input class=\"range\" style=\"margin-bottom: 8px\" type=range bind:value={CFR} min={0} max=1 step=0.0001>\n      <div class=\"paneldesc\" style=\"height:29px; border-top: 1px solid #EEE; padding-top: 10px\">Time from end of incubation to death.<br></div>\n      <div class=\"slidertext\">{Time_to_death} Days</div>\n      <input class=\"range\" type=range bind:value={Time_to_death} min={(D_infectious)+0.1} max=100 step=0.01>\n    </div>\n\n    <div class=\"column\">\n      <div class=\"paneltitle\">Recovery Times</div>\n      <div class=\"paneldesc\" style=\"height:30px\">Length of hospital stay<br></div>\n      <div class=\"slidertext\">{D_recovery_severe} Days</div>\n      <input class=\"range\" style=\"margin-bottom: 8px\" type=range bind:value={D_recovery_severe} min={0.1} max=100 step=0.01>\n      <div class=\"paneldesc\" style=\"height:29px; border-top: 1px solid #EEE; padding-top: 10px\">Recovery time for mild cases<br></div>\n      <div class=\"slidertext\">{D_recovery_mild} Days</div>\n      <input class=\"range\" type=range bind:value={D_recovery_mild} min={0.5} max=100 step=0.01>\n    </div>\n\n    <div class=\"column\">\n      <div class=\"paneltitle\">Care statistics</div>\n      <div class=\"paneldesc\" style=\"height:30px\">Hospitalization rate.<br></div>\n      <div class=\"slidertext\">{(P_SEVERE*100).toFixed(2)} %</div>\n      <input class=\"range\" style=\"margin-bottom: 8px\"type=range bind:value={P_SEVERE} min={0} max=1 step=0.0001>      \n      <div class=\"paneldesc\" style=\"height:29px; border-top: 1px solid #EEE; padding-top: 10px\">Time to hospitalization.<br></div>\n      <div class=\"slidertext\">{D_hospital_lag} Days</div>\n      <input class=\"range\" type=range bind:value={D_hospital_lag} min={0.5} max=100 step=0.01>\n    </div>\n\n  </div>\n</div>\n\n<div style=\"position: relative; height: 12px\"></div>\n\n<p class = \"center\"><b>What is this?</b><br>This is a modification of Gabriel Goh's epidemic calculator (available <a href=\"http://gabgoh.github.io/COVID/index.html\">here</a>), that complements the epidemic calculation with a graph of  confirmed cases and deaths for a specified country, based on the Johns Hopkins University repository. The app lets you explore different strategies to respond. See this article for further information: <a href=\"https://medium.com/@tomaspueyo/coronavirus-the-hammer-and-the-dance-be9337092b56\">Tomas Pueyo - Coronavirus: The Hammer and the Dance</a></p>\n\n<p class = \"center\"><b>What is shown?</b><br>\nPlease refer to the text below for a description of the simulated data. When you select \"Johns Hopkins Data\", the cumulative number of deaths on a given day is plotted in blue. This corresponds to the cumulated number of deaths in the simulation (shown in light blue). There is no exact analogue in the simulation for the number of confirmed cases in the real world. In pink we show the <i>new</i> number of cases in your country on a given day. This implies that new cases are only isolated following a positive test outcome - before they receive the test outcome they are infectious, not isolated and hence may be interpreted as analogue to the \"infected\" category of the simulation.</p>\n\n<p class = \"center\"><b>Response Strategies</b><br>While most countries have realized that simply observing the disease is not a good strategy, a debate is on whether it is better to mitigate or suppress the outbreak.</p>\n\n<p class = \"center\">A <italic>mitigaton</italic> strategy seeks to bring the growth rate {@html math_inline(\"R_{0}\")} close to 1, so that the burden on the health care system can be managed. The goal of such a strategy is to achieve what is called herd immunity. Such a strategy implies that restrictions such as social distancing have to be in place for a long time since the number of new cases per day must be kept manageable. Moreover such a strategy gives the virus substantial opportunity to evolve.</p>\n\n<p class=\"center\">A <italic>suppresion</italic> strategy on the other hand seeks to achieve a growth rate {@html math_inline(\"R_{0}\")} smaller than 1 until the number of new cases is near zero. At this stage sufficient testing and tracking capabilities may enable a targeted response to small outbreaks, and a lift of measures such as social distancing.</p>\n\n<p class=\"center\">You can explore the different strategies using the buttons for \"Observe\", \"Mitigate\" and \"Suppress\". You can change the duration of the simulation by click and drag of an axis label.</p>\n\n<p class=\"center\"><b>Limitations</b><br>\nNote that it is not possible to accurately predict the outcome figures for \"Total infected\" and \"Fatalities\" -  these have to be interpreted as order of magnitude estimates for a given strategy.</p>\n\n<p class = \"center\">Please note also that if your country has recently implemented new elements of a mitigation or suppression strategy, these may not be reflected in your countries current data yet.</p>\n\n<p class = \"center\"><b>Acknowledgements</b><br>\nMany thanks to Gabriel Goh for writing this excellent calculator in the first place, and to Karel Kouřil for feedback on the country specific features.\n\n\n<p class = \"center\">The original information about the usage of the calculator, written by Gabriel Goh is given below (also available at <a href=\"http://gabgoh.github.io/COVID/index.html\">http://gabgoh.github.io/COVID/index.html</a>. To provide feedback and comments on the country-specific features please email me <a href=\"&#x6d;&#x61;&#x69;&#x6c;&#x74;&#x6f;&#x3a;&#x6d;&#x65;&#x69;&#x65;&#x72;&#x2e;&#x62;&#x65;&#x6e;&#x6e;&#x6f;&#x40;&#x67;&#x6d;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;\">\nhere</a>.</p>\n\t     \n<p class =\"center\" style=\"border-top: 2px solid #666; width:950px; padding-top:10px;\">\nAt the time of writing, the coronavirus disease of 2019 remains a global health crisis of grave and uncertain magnitude. To the non-expert (such as myself), contextualizing the numbers, forecasts and epidemiological parameters described in the media and literature can be challenging. I created this calculator as an attempt to address this gap in understanding.</p>\n\n<p class = \"center\">\nThis calculator implements a classical infectious disease model &mdash <b><a href=\"https://en.wikipedia.org/wiki/Compartmental_models_in_epidemiology#The_SEIR_model\">SEIR</a> </b>(<b>S</b>usceptible → <span style=\"color:{colors[4]}\"><b>E</b></span>xposed → <span style=\"color:{colors[3]}\"><b>I</b></span>nfected → <span><b>R</b></span>emoved), an idealized model of spread still used in frontlines of research e.g. [<a href=\"https://www.thelancet.com/journals/lancet/article/PIIS0140-6736(20)30260-9/fulltext\">Wu, et. al</a>, <a href = \"https://cmmid.github.io/topics/covid19/current-patterns-transmission/wuhan-early-dynamics.html\">Kucharski et. al</a>]. The dynamics of this model are characterized by a set of four ordinary differential equations that correspond to the stages of the disease's progression:\n<span style=\"color:#777\">{@html ode_eqn}</span>\nIn addition to the transmission dynamics, this model allows the use of supplemental timing information to model the death rate and healthcare burden. \n</p>\n\n<p class = \"center\">\nNote that one can use this calculator to measure one's risk exposure to the disease for any given day of the epidemic: the probability of getting infected on day {Math.round(indexToTime(active_))} given <a href=\"https://www.cdc.gov/coronavirus/2019-ncov/hcp/guidance-risk-assesment-hcp.html\">close contact</a> with <input type=\"text\" style=\"width:{Math.ceil(Math.log10(p_num_ind))*9.5 + 5}px; font-size: 15.5px; color:#777\" bind:value={p_num_ind}> individuals is {((1-(Math.pow(1 - (Iters[active_][2])*(0.45/100), p_num_ind)))*100).toFixed(5)}% given an attack rate of 0.45% [<a href=\"https://www.cdc.gov/mmwr/volumes/69/wr/mm6909e1.htm?s_cid=mm6909e1_w\">Burke et. al</a>].\n</p>\n\n\n<p class = \"center\">\nA sampling of the estimates for epidemic parameters are presented below:\n</p>\n\n<div class=\"center\">\n<table style=\"width:100%; margin:auto; font-weight: 300; border-spacing: inherit\">\n  <tr>\n    <th></th>\n    <th>Location</th>\n    <th>Reproduction Number<br> {@html math_inline(\"\\\\mathcal{R}_0\")}</th>\n    <th>Incubation Period<br> {@html math_inline(\"T_{\\\\text{inc}}\")} (in days)</th>\n    <th>Infectious Period<br> {@html math_inline(\"T_{\\\\text{inf}}\")} (in days)</th>\n  </tr>\n  <tr>\n    <td width=\"27%\"><a href = \"https://cmmid.github.io/topics/covid19/current-patterns-transmission/wuhan-early-dynamics.html\">Kucharski et. al</a></td>\n    <td>Wuhan </td>    \n    <td>3.0 (1.5 — 4.5)</td>\n    <td>5.2</td>\n    <td>2.9</td>\n  </tr>\n  <tr>\n    <td><a href = \"https://www.nejm.org/doi/full/10.1056/NEJMoa2001316\">Li, Leung and Leung</a></td>\n    <td>Wuhan </td>    \n    <td>2.2 (1.4 — 3.9)</td>\n    <td>5.2 (4.1 — 7.0)</td>\n    <td>2.3 (0.0 — 14.9)</td>\n  </tr>\n  <tr>\n    <td><a href = \"https://www.thelancet.com/journals/lancet/article/PIIS0140-6736(20)30260-9/fulltext\">Wu et. al</a></td>\n    <td>Greater Wuhan </td>    \n    <td>2.68 (2.47 — 2.86)</td>\n    <td>6.1</td>\n    <td>2.3</td>\n  </tr>\n  <tr>\n    <td><a href = \"https://www.who.int/news-room/detail/23-01-2020-statement-on-the-meeting-of-the-international-health-regulations-(2005)-emergency-committee-regarding-the-outbreak-of-novel-coronavirus-(2019-ncov)\">WHO Initial Estimate</a></td>\n    <td>Hubei </td>    \n    <td>1.95 (1.4 — 2.5)</td>\n    <td></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><a href = \"https://www.who.int/docs/default-source/coronaviruse/who-china-joint-mission-on-covid-19-final-report.pdf\">WHO-China Joint Mission </a></td>\n    <td>Hubei </td>    \n    <td>2.25 (2.0 — 2.5)</td>\n    <td>5.5 (5.0 - 6.0)</td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><a href = \"https://www.biorxiv.org/content/10.1101/2020.01.25.919787v2\">Liu et. al </a></td>\n    <td>Guangdong</td>\n    <td>4.5 (4.4 — 4.6)</td>\n    <td>4.8 (2.2 — 7.4) </td>\n    <td>2.9 (0 — 5.9)</td>\n  </tr>\n  <tr>\n    <td><a href = \"https://academic.oup.com/jtm/advance-article/doi/10.1093/jtm/taaa030/5766334\">Rocklöv, Sjödin and Wilder-Smith</a></td>\n    <td>Princess Diamond</td>\n    <td>14.8</td>\n    <td>5.0</td>\n    <td>10.0</td>\n  </tr>\n  <tr>\n    <td><a href = \"https://www.eurosurveillance.org/content/10.2807/1560-7917.ES.2020.25.5.2000062\">Backer, Klinkenberg, Wallinga</a></td>\n    <td>Wuhan</td>\n    <td></td>\n    <td>6.5 (5.6 — 7.9)</td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><a href = \"https://www.medrxiv.org/content/10.1101/2020.01.23.20018549v2.article-info\">Read et. al</a></td>\n    <td>Wuhan</td>\n    <td>3.11 (2.39 — 4.13)</td>\n    <td></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><a href = \"https://www.medrxiv.org/content/10.1101/2020.03.03.20028423v1\">Bi et. al</a></td>\n    <td>Shenzhen</td>\n    <td></td>\n    <td>4.8 (4.2 — 5.4)</td>\n    <td>1.5 (0 — 3.4)</td>\n    <td></td>\n  </tr>\n\n  <tr>\n    <td><a href = \"https://www.mdpi.com/2077-0383/9/2/462\">Tang et. al</a></td>\n    <td>China</td>\n    <td>6.47 (5.71 — 7.23)</td>\n    <td></td>\n    <td></td>\n  </tr>\n\n</table>\n</div>\n\n\n<p class=\"center\">\nSee [<a href=\"https://academic.oup.com/jtm/advance-article/doi/10.1093/jtm/taaa021/5735319\">Liu et. al</a>] detailed survey of current estimates of the reproduction number. Parameters for the diseases' clinical characteristics are taken from the following <a href=\"https://www.who.int/docs/default-source/coronaviruse/who-china-joint-mission-on-covid-19-final-report.pdf\">WHO Report</a>. \n</p>\n\n<p class=\"center\">\nPlease DM me feedback <a href=\"https://twitter.com/gabeeegoooh\">here</a> or email me <a href=\"mailto:izmegabe@gmail.com\">here</a>. My <a href=\"http://gabgoh.github.io/\">website</a>.\n</p>\n<!-- \n<p class=\"center\">\n<a href=\"https://twitter.com/gabeeegoooh?ref_src=twsrc%5Etfw\" class=\"twitter-follow-button\" data-show-count=\"false\"><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</p> -->\n\n\n<p class = \"center\">\n<b> Model Details </b><br>\nThe clinical dynamics in this model are an elaboration on SEIR that simulates the disease's progression at a higher resolution, subdividing {@html math_inline(\"I,R\")} into <i>mild</i> (patients who recover without the need for hospitalization), <i>moderate</i> (patients who require hospitalization but survive) and <i>fatal</i> (patients who require hospitalization and do not survive). Each of these variables follows its own trajectory to the final outcome, and the sum of these compartments add up to the values predicted by SEIR. Please refer to the source code for details. Note that we assume, for simplicity, that all fatalities come from hospitals, and that all fatal cases are admitted to hospitals immediately after the infectious period.\n</p>\n\n<p class = \"center\">\n<b> Acknowledgements </b><br>\n<a href = \"https://enkimute.github.io/\">Steven De Keninck</a> for RK4 Integrator. <a href=\"https://twitter.com/ch402\">Chris Olah</a>, <a href=\"https://twitter.com/shancarter\">Shan Carter\n</a> and <a href=\"https://twitter.com/ludwigschubert\">Ludwig Schubert\n</a> wonderful feedback. Charlie Huang for context and discussion.\n</p>\n\n<!-- Input data -->\n<div style=\"margin-bottom: 30px\">\n\n  <div class=\"center\" style=\"padding: 10px; margin-top: 3px; width: 925px\">\n    <div class=\"legendtext\">Export parameters:</div>\n    <form>\n      <textarea type=\"textarea\" rows=\"1\" cols=\"5000\" style=\"white-space: nowrap;  overflow: auto; width:100%; text-align: left\" id=\"fname\" name=\"fname\">{state}</textarea>\n    </form>\n  </div>\n</div>\n\n\n\n\n",
    "<script>\n  import { beforeUpdate, createEventDispatcher, onDestroy, onMount, tick } from 'svelte';\n  import List from './List.svelte';\n  import ItemComponent from './Item.svelte';\n  import SelectionComponent from './Selection.svelte';\n  import MultiSelectionComponent from './MultiSelection.svelte';\n  import isOutOfViewport from './utils/isOutOfViewport';\n  import debounce from './utils/debounce';\n\n  const dispatch = createEventDispatcher();\n  export let container = undefined;\n  export let input = undefined;\n  export let Item = ItemComponent;\n  export let Selection = SelectionComponent;\n  export let MultiSelection = MultiSelectionComponent;\n  export let isMulti = false;\n  export let isDisabled = false;\n  export let isCreatable = false;\n  export let isFocused = false;\n  export let selectedValue = undefined;\n  export let filterText = '';\n  export let placeholder = 'Select...';\n  export let items = [];\n  export let itemFilter = (label, filterText, option) => label.toLowerCase().includes(filterText.toLowerCase());\n  export let groupBy = undefined;\n  export let groupFilter = (groups) => groups;\n  export let isGroupHeaderSelectable = false;\n  export let getGroupHeaderLabel = (option) => {\n    return option.label\n  };\n  export let getOptionLabel = (option, filterText) => {\n    return option.isCreator ? `Create \\\"${filterText}\\\"` : option.label;\n  };\n  export let optionIdentifier = 'value';\n  export let loadOptions = undefined;\n  export let hasError = false;\n  export let containerStyles = '';\n  export let getSelectionLabel = (option) => {\n    if (option) return option.label\n  };\n\n  export let createGroupHeaderItem = (groupValue) => {\n    return {\n      value: groupValue,\n      label: groupValue\n    }\n  };\n\n  export let createItem = (filterText) => {\n    return {\n      value: filterText,\n      label: filterText\n    };\n  };\n\n  export let isSearchable = true;\n  export let inputStyles = '';\n  export let isClearable = true;\n  export let isWaiting = false;\n  export let listPlacement = 'auto';\n  export let listOpen = false;\n  export let list = undefined;\n  export let isVirtualList = false;\n  export let loadOptionsInterval = 300;\n  export let noOptionsMessage = 'No options';\n  export let hideEmptyState = false;\n  export let filteredItems = [];\n  export let inputAttributes = {};\n  export let listAutoWidth = true;\n  export let itemHeight = 40;\n  \n\n  let target;\n  let activeSelectedValue;\n  let _items = [];\n  let originalItemsClone;\n  let containerClasses = '';\n  let prev_selectedValue;\n  let prev_listOpen;\n  let prev_filterText;\n  let prev_isFocused;\n  let prev_filteredItems;\n\n  async function resetFilter() {\n    await tick();\n    filterText = '';\n  }\n\n  const getItems = debounce(async () => {\n    isWaiting = true;\n    \n    items = await loadOptions(filterText);\n  \n    isWaiting = false;\n    isFocused = true;\n    listOpen = true;\n  }, loadOptionsInterval);\n\n  $:disabled = isDisabled;\n\n  $: {\n    containerClasses = `selectContainer`;\n    containerClasses += isMulti ? ' multiSelect' : '';\n    containerClasses += isDisabled ? ' disabled' : '';\n    containerClasses += isFocused ? ' focused' : '';\n  }\n\n  $: {\n    if (typeof selectedValue === 'string') {\n      selectedValue = { [optionIdentifier]: selectedValue, label: selectedValue }\n    }\n  }\n\n  $: showSelectedItem = selectedValue && filterText.length === 0;\n\n  $: placeholderText = selectedValue ? '' : placeholder;\n\n  let _inputAttributes = {};\n  $: {\n    _inputAttributes = Object.assign(inputAttributes, {\n      autocomplete: 'off',\n      autocorrect: 'off',\n      spellcheck: false\n    })\n\n    if (!isSearchable) {\n      _inputAttributes.readonly = true;\n    }\n  }\n\n  $: {\n    let _filteredItems;\n    let _items = items;\n\n    if (items && items.length > 0 && typeof items[0] !== 'object') {\n      _items = items.map((item, index) => {\n        return {\n          index,\n          value: item,\n          label: item\n        }\n      })\n    }\n\n    if (loadOptions && filterText.length === 0 && originalItemsClone) {\n      _filteredItems = JSON.parse(originalItemsClone);\n      _items = JSON.parse(originalItemsClone);\n    } else {\n      _filteredItems = loadOptions ? filterText.length === 0 ? [] : _items : _items.filter(item => {\n\n        let keepItem = true;\n\n        if (isMulti && selectedValue) {\n          keepItem = !selectedValue.find((value) => {\n            return value[optionIdentifier] === item[optionIdentifier]\n          });\n        }\n\n        if (!keepItem) return false;\n        if (filterText.length < 1) return true;\n        return itemFilter(getOptionLabel(item, filterText), filterText, item);\n      });\n    }\n\n    if (groupBy) {\n      const groupValues = [];\n      const groups = {};\n\n      _filteredItems.forEach((item) => {\n        const groupValue = groupBy(item);\n\n        if (!groupValues.includes(groupValue)) {\n          groupValues.push(groupValue);\n          groups[groupValue] = [];\n\n          if(groupValue) {\n            groups[groupValue].push(Object.assign(\n              createGroupHeaderItem(groupValue, item), \n              { \n                id: groupValue, \n                isGroupHeader: true, \n                isSelectable: isGroupHeaderSelectable\n              }\n            ));\n          }\n        }\n        \n        groups[groupValue].push(Object.assign({ isGroupItem: !!groupValue }, item));\n      });\n\n      const sortedGroupedItems = [];\n\n      groupFilter(groupValues).forEach((groupValue) => {\n        sortedGroupedItems.push(...groups[groupValue]);\n      });\n\n      filteredItems = sortedGroupedItems;\n    } else {\n      filteredItems = _filteredItems;\n    }\n  }\n\n  beforeUpdate(() => {\n    if (isMulti && selectedValue && selectedValue.length > 1) {\n      checkSelectedValueForDuplicates();\n    }\n\n    if (!isMulti && selectedValue && prev_selectedValue !== selectedValue) {\n      if (!prev_selectedValue || JSON.stringify(selectedValue[optionIdentifier]) !== JSON.stringify(prev_selectedValue[optionIdentifier])) {\n        dispatch('select', selectedValue);\n      }\n    }\n\n    if (isMulti && JSON.stringify(selectedValue) !== JSON.stringify(prev_selectedValue)) {\n      if (checkSelectedValueForDuplicates()) {\n        dispatch('select', selectedValue);\n      }\n    }\n\n    if (container && listOpen !== prev_listOpen) {\n      if (listOpen) {\n        loadList();\n      } else {\n        removeList();\n      }\n    }\n\n    if (filterText !== prev_filterText) {\n      if (filterText.length > 0) {\n        isFocused = true;\n        listOpen = true;\n\n        if (loadOptions) {\n          getItems();\n        } else {\n          loadList();\n          listOpen = true;\n\n          if (isMulti) {\n            activeSelectedValue = undefined\n          }\n        }\n      } else {\n        setList([])\n      }\n\n      if (list) {\n        list.$set({\n          filterText\n        });\n      }\n    }\n\n    if (isFocused !== prev_isFocused) {\n      if (isFocused || listOpen) {\n        handleFocus();\n      } else {\n        resetFilter();\n        if (input) input.blur();\n      }\n    }\n\n    if (prev_filteredItems !== filteredItems) {\n      let _filteredItems = [...filteredItems];\n\n      if (isCreatable && filterText) {\n        const itemToCreate = createItem(filterText);\n        itemToCreate.isCreator = true;\n\n        const existingItemWithFilterValue = _filteredItems.find((item) => {\n          return item[optionIdentifier] === itemToCreate[optionIdentifier];\n        });\n\n        let existingSelectionWithFilterValue;\n\n        if (selectedValue) {\n          if (isMulti) {\n            existingSelectionWithFilterValue = selectedValue.find((selection) => {\n              return selection[optionIdentifier] === itemToCreate[optionIdentifier];\n            });\n          } else if (selectedValue[optionIdentifier] === itemToCreate[optionIdentifier]) {\n            existingSelectionWithFilterValue = selectedValue;\n          }\n        }\n\n        if (!existingItemWithFilterValue && !existingSelectionWithFilterValue) {\n          _filteredItems = [..._filteredItems, itemToCreate];\n        }\n      }\n\n      setList(_filteredItems);\n    }\n\n    prev_selectedValue = selectedValue;\n    prev_listOpen = listOpen;\n    prev_filterText = filterText;\n    prev_isFocused = isFocused;\n    prev_filteredItems = filteredItems;\n  });\n\n  function checkSelectedValueForDuplicates() {\n    let noDuplicates = true;\n    if (selectedValue) {\n      const ids = [];\n      const uniqueValues = [];\n\n      selectedValue.forEach(val => {\n        if (!ids.includes(val[optionIdentifier])) {\n          ids.push(val[optionIdentifier]);\n          uniqueValues.push(val);\n        } else {\n          noDuplicates = false;\n        }\n      })\n\n      selectedValue = uniqueValues\n    }\n    return noDuplicates;\n  }\n\n  async function setList(items) {\n    await tick();\n    if (list) return list.$set({ items })\n    if (loadOptions && items.length > 0) loadList();\n  }\n\n  function handleMultiItemClear(event) {\n    const { detail } = event;\n    const itemToRemove = selectedValue[detail ? detail.i : selectedValue.length - 1];\n\n    if (selectedValue.length === 1) {\n      selectedValue = undefined;\n    } else {\n      selectedValue = selectedValue.filter((item) => {\n        return item !== itemToRemove;\n      });\n    }\n\n    dispatch('clear', itemToRemove);\n    \n    getPosition();\n  }\n\n  async function getPosition() {\n    await tick();\n    if (!target || !container) return;\n    const { top, height, width } = container.getBoundingClientRect();\n\n    target.style['min-width'] = `${width}px`;\n    target.style.width = `${listAutoWidth ? 'auto' : '100%'}`;\n    target.style.left = '0';\n\n    if (listPlacement === 'top') {\n      target.style.bottom = `${height + 5}px`;\n    } else {\n      target.style.top = `${height + 5}px`;\n    }\n\n    target = target;\n\n    if (listPlacement === 'auto' && isOutOfViewport(target).bottom) {\n      target.style.top = ``;\n      target.style.bottom = `${height + 5}px`;\n    }\n\n    target.style.visibility = '';\n  }\n\n  function handleKeyDown(e) {\n    if (!isFocused) return;\n\n    switch (e.key) {\n      case 'ArrowDown':\n        e.preventDefault();\n        listOpen = true;\n        activeSelectedValue = undefined;\n        break;\n      case 'ArrowUp':\n        e.preventDefault();\n        listOpen = true;\n        activeSelectedValue = undefined;\n        break;\n      case 'Tab':\n        if (!listOpen) isFocused = false;\n        break;\n      case 'Backspace':\n        if (!isMulti || filterText.length > 0) return;\n        if (isMulti && selectedValue && selectedValue.length > 0) {\n          handleMultiItemClear(activeSelectedValue !== undefined ? activeSelectedValue : selectedValue.length - 1);\n          if (activeSelectedValue === 0 || activeSelectedValue === undefined) break;\n          activeSelectedValue = selectedValue.length > activeSelectedValue ? activeSelectedValue - 1 : undefined;\n        }\n        break;\n      case 'ArrowLeft':\n        if (list) list.$set({ hoverItemIndex: -1 });\n        if (!isMulti || filterText.length > 0) return;\n\n        if (activeSelectedValue === undefined) {\n          activeSelectedValue = selectedValue.length - 1;\n        } else if (selectedValue.length > activeSelectedValue && activeSelectedValue !== 0) {\n          activeSelectedValue -= 1\n        }\n        break;\n      case 'ArrowRight':\n        if (list) list.$set({ hoverItemIndex: -1 });\n        if (!isMulti || filterText.length > 0 || activeSelectedValue === undefined) return;\n        if (activeSelectedValue === selectedValue.length - 1) {\n          activeSelectedValue = undefined;\n        } else if (activeSelectedValue < selectedValue.length - 1) {\n          activeSelectedValue += 1;\n        }\n        break;\n    }\n  }\n\n  function handleFocus() {\n    isFocused = true;\n    if (input) input.focus();\n  }\n\n  function removeList() {\n    resetFilter();\n    activeSelectedValue = undefined;\n\n    if (!list) return;\n    list.$destroy();\n    list = undefined;\n\n    if (!target) return;\n    if (target.parentNode) target.parentNode.removeChild(target);\n    target = undefined;\n\n    list = list;\n    target = target;\n  }\n\n  function handleWindowClick(event) {\n    if (!container) return;\n    const eventTarget = event.path && (event.path.length > 0) ? event.path[0] : event.target\n    if (container.contains(eventTarget)) return;\n    isFocused = false;\n    listOpen = false;\n    activeSelectedValue = undefined;\n    if (input) input.blur();\n  }\n\n  function handleClick() {\n    if (isDisabled) return;\n    isFocused = true;\n    listOpen = !listOpen;\n  }\n\n  export function handleClear() {\n    selectedValue = undefined;\n    listOpen = false;\n    dispatch('clear', selectedValue);\n    handleFocus();\n  }\n\n  async function loadList() {\n    await tick();\n    if (target && list) return;\n\n    const data = {\n      Item,\n      filterText,\n      optionIdentifier,\n      noOptionsMessage,\n      hideEmptyState,\n      isVirtualList,\n      selectedValue,\n      isMulti,\n      getGroupHeaderLabel,\n      items: filteredItems,\n      itemHeight\n    };\n\n    if (getOptionLabel) {\n      data.getOptionLabel = getOptionLabel;\n    }\n\n    target = document.createElement('div');\n\n    Object.assign(target.style, {\n      position: 'absolute',\n      'z-index': 2,\n      'visibility': 'hidden'\n    });\n\n    list = list;\n    target = target;\n    if (container) container.appendChild(target);\n\n    list = new List({\n      target,\n      props: data\n    });\n\n    list.$on('itemSelected', (event) => {\n      const { detail } = event;\n\n      if (detail) {\n        const item = Object.assign({}, detail);\n\n        if (isMulti) {\n          selectedValue = selectedValue ? selectedValue.concat([item]) : [item];\n        } else {\n          selectedValue = item;\n        }\n\n        resetFilter();\n        selectedValue = selectedValue;\n\n        setTimeout(() => {\n          listOpen = false;\n          activeSelectedValue = undefined;\n        });\n      }\n    });\n\n    list.$on('itemCreated', (event) => {\n      const { detail } = event;\n      if (isMulti) {\n        selectedValue = selectedValue || [];\n        selectedValue = [...selectedValue, createItem(detail)]\n      } else {\n        selectedValue = createItem(detail)\n      }\n\n      filterText = '';\n      listOpen = false;\n      activeSelectedValue = undefined;\n      resetFilter();\n    });\n    \n    list.$on('closeList', () => {\n      listOpen = false;\n    });\n  \n    list = list,\n    target = target;\n    getPosition();\n  }\n\n  onMount(() => {\n    if (isFocused) input.focus();\n    if (listOpen) loadList();\n\n    if (items && items.length > 0) {\n      originalItemsClone = JSON.stringify(items);\n    }\n\n    if (selectedValue) {\n      if (isMulti) {\n        selectedValue = selectedValue.map(item => {\n          if (typeof item === 'string') {\n            return { value: item, label: item }\n          } else {\n            return item;\n          }\n        })\n      }\n    }\n  });\n\n  onDestroy(() => {\n    removeList()\n  });\n</script>\n\n<svelte:window on:click=\"{handleWindowClick}\" on:keydown=\"{handleKeyDown}\" on:resize=\"{getPosition}\" />\n\n<div class=\"{containerClasses} {hasError ? 'hasError' : ''}\" style=\"{containerStyles}\" on:click=\"{handleClick}\"\n  bind:this={container}>\n\n  {#if isMulti && selectedValue && selectedValue.length > 0}\n  <svelte:component\n    this=\"{MultiSelection}\"\n    {selectedValue}\n    {getSelectionLabel}\n    {activeSelectedValue}\n    {isDisabled}\n    on:multiItemClear=\"{handleMultiItemClear}\"\n    on:focus=\"{handleFocus}\"\n  />\n  {/if}\n\n\n  {#if isDisabled}\n    <input\n      {..._inputAttributes}\n      bind:this={input}\n      on:focus=\"{handleFocus}\"\n      bind:value=\"{filterText}\"    \n      placeholder=\"{placeholderText}\"\n      style=\"{inputStyles}\"\n      disabled\n    >\n  {:else}\n    <input\n      {..._inputAttributes}\n      bind:this={input}\n      on:focus=\"{handleFocus}\"\n      bind:value=\"{filterText}\"    \n      placeholder=\"{placeholderText}\"\n      style=\"{inputStyles}\"\n    >\n  {/if}\n\n  {#if !isMulti && showSelectedItem }\n  <div class=\"selectedItem\" on:focus=\"{handleFocus}\">\n    <svelte:component this=\"{Selection}\" item={selectedValue} {getSelectionLabel}/>\n  </div>\n  {/if}\n\n  {#if showSelectedItem && isClearable && !isDisabled && !isWaiting}\n  <div class=\"clearSelect\" on:click|preventDefault=\"{handleClear}\">\n    <svg width=\"100%\" height=\"100%\" viewBox=\"-2 -2 50 50\" focusable=\"false\"\n         role=\"presentation\">\n      <path fill=\"currentColor\"\n            d=\"M34.923,37.251L24,26.328L13.077,37.251L9.436,33.61l10.923-10.923L9.436,11.765l3.641-3.641L24,19.047L34.923,8.124 l3.641,3.641L27.641,22.688L38.564,33.61L34.923,37.251z\"></path>\n    </svg>\n  </div>\n  {/if}\n\n  {#if !isSearchable && !isDisabled && !isWaiting && (showSelectedItem && !isClearable || !showSelectedItem)}\n  <div class=\"indicator\">\n    <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 20 20\" focusable=\"false\" class=\"css-19bqh2r\">\n      <path\n        d=\"M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z\"></path>\n    </svg>\n  </div>\n  {/if}\n\n  {#if isWaiting}\n  <div class=\"spinner\">\n    <svg class=\"spinner_icon\" viewBox=\"25 25 50 50\">\n      <circle class=\"spinner_path\" cx=\"50\" cy=\"50\" r=\"20\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"5\"\n              stroke-miterlimit=\"10\"></circle>\n    </svg>\n  </div>\n  {/if}\n</div>\n\n<style>\n  .selectContainer {\n    border: var(--border, 1px solid #D8DBDF);\n    border-radius: var(--borderRadius, 3px);\n    height: var(--height, 42px);\n    position: relative;\n    display: flex;\n    padding: var(--padding, 0 16px);\n    background: var(--background, #fff);\n  }\n\n  .selectContainer input {\n    cursor: default;\n    border: none;\n    color: var(--inputColor, #3F4F5F);\n    height: var(--height, 42px);\n    line-height: var(--height, 42px);\n    padding: var(--padding, 0 16px);\n    width: 100%;\n    background: transparent;\n    font-size: var(--inputFontSize, 14px);\n    letter-spacing: var(--inputLetterSpacing, -0.08px);\n    position: absolute;\n    left: 0;\n  }\n\n  .selectContainer input::placeholder {\n    color: var(--placeholderColor, #78848F);\n  }\n\n  .selectContainer input:focus {\n    outline: none;\n  }\n\n  .selectContainer:hover {\n    border-color: var(--borderHoverColor, #b2b8bf);\n  }\n\n  .selectContainer.focused {\n    border-color: var(--borderFocusColor, #006FE8);\n  }\n\n  .selectContainer.disabled {\n    background: var(--disabledBackground, #EBEDEF);\n    border-color: var(--disabledBorderColor, #EBEDEF);\n    color: var(--disabledColor, #C1C6CC);\n  }\n\n  .selectContainer.disabled input::placeholder {\n    color: var(--disabledPlaceholderColor, #C1C6CC);\n  }\n\n  .selectedItem {\n    line-height: var(--height, 42px);\n    height: var(--height, 42px);\n    overflow-x: hidden;\n    padding: var(--selectedItemPadding, 0 20px 0 0);\n  }\n\n  .selectedItem:focus {\n    outline: none;\n  }\n\n  .clearSelect {\n    position: absolute;\n    right: var(--clearSelectRight, 10px);\n    top: var(--clearSelectTop, 11px);\n    bottom: var(--clearSelectBottom, 11px);\n    width: var(--clearSelectWidth, 20px);\n    color: var(--clearSelectColor, #c5cacf);\n    flex: none !important;\n  }\n\n  .clearSelect:hover {\n    color: var(--clearSelectHoverColor, #2c3e50);\n  }\n\n  .selectContainer.focused .clearSelect {\n    color: var(--clearSelectFocusColor, #3F4F5F)\n  }\n\n  .indicator {\n    position: absolute;\n    right: var(--indicatorRight, 10px);\n    top: var(--indicatorTop, 11px);\n    width: var(--indicatorWidth, 20px);\n    height: var(--indicatorHeight, 20px);\n    color: var(--indicatorColor, #c5cacf);\n  }\n\n  .indicator svg {\n    display: inline-block;\n    fill: var(--indicatorFill, currentcolor);\n    line-height: 1;\n    stroke: var(--indicatorStroke, currentcolor);\n    stroke-width: 0;\n  }\n\n  .spinner {\n    position: absolute;\n    right: var(--spinnerRight, 10px);\n    top: var(--spinnerLeft, 11px);\n    width: var(--spinnerWidth, 20px);\n    height: var(--spinnerHeight, 20px);\n    color: var(--spinnerColor, #51ce6c);\n    animation: rotate 0.75s linear infinite;\n  }\n\n  .spinner_icon {\n    display: block;\n    height: 100%;\n    transform-origin: center center;\n    width: 100%;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    margin: auto;\n    -webkit-transform: none;\n  }\n\n  .spinner_path {\n    stroke-dasharray: 90;\n    stroke-linecap: round;\n  }\n\n  .multiSelect {\n    display: flex;\n    padding: var(--multiSelectPadding, 0 35px 0 16px);\n    height: auto;\n    flex-wrap: wrap;\n  }\n\n  .multiSelect > * {\n    flex: 1 1 50px;\n  }\n\n  .selectContainer.multiSelect input {\n    padding: var(--multiSelectInputPadding, 0);\n    position: relative;\n    margin: var(--multiSelectInputMargin, 0);\n  }\n\n  .hasError {\n    border: var(--errorBorder, 1px solid #FF2D55);\n  }\n\n  @keyframes rotate {\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n</style>\n",
    "\n<script>\n  import { scaleLinear, scaleLog } from 'd3-scale';\n  import { drag } from 'd3-drag';\n  import { selectAll } from 'd3-selection'\n  import { onMount } from 'svelte';\n  import { csv } from 'd3-fetch';\n  import { createEventDispatcher } from 'svelte';\n  import { myRange} from './range.js';\n  const dispatch = createEventDispatcher();\n  function range(n){\n    return Array(n).fill().map((_, i) => i);\n  }\n  $: showTip = function (i) {\n    active_hover = i\n  }\n  function formatNumber(num) {\n    return num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')\n  }\n  var sum = function(arr, bools){\n    var x = 0\n    for (var i = 0; i < arr.length; i++) {\n      x = x + arr[i]*(bools[i] ? 1 : 0)\n    }\n    return x\n  }\n  export let countryData;\n  export let country;\n  export let province;\nexport let lastDayInPlot;\nexport let maxRealCases;\n\n  export let y;\n  export let tmax;\n  export let xmax; \n  export let deaths;\n  export let total;\n  export let vline;\n  export let timestep;\n  export let total_infected;\n  export let N;\n  export let ymax;\n  export let InterventionTime;\nexport let colors;\nexport let colorsJHU;\nexport let log = false;\nexport let showJHU = true;\nexport let showSIM = false;\n  const padding = { top: 20, right: 0, bottom: 20, left: 25 };\n  let width  = 750;\nlet height = 420;\n  $: xScale = scaleLinear()\n    .domain([0, y.length])\n    .range([padding.left, width - padding.right]);\n  $: xScaleTime = scaleLinear()\n    .domain([0, tmax])\n    .range([padding.left, width - padding.right]);\n  $: timeToIndex = scaleLinear()\n    .domain([0, tmax])\n    .range([0, y.length])\n  $: indexToTime = scaleLinear()\n    .domain([0, y.length])\n    .range([0, tmax])\n  $: timeToIndex = scaleLinear()\n    .domain([0, tmax])\n    .range([0, y.length])\n  $: yScale = (log ? scaleLog(): scaleLinear())\n    .domain([log ? 1: 0,  ymax])\n    .range([height - padding.bottom, padding.top]);\n  $: yScaleL = scaleLog()\n    .domain([1,  ymax/1])\n    .range([0, height - padding.bottom - padding.top]);\n \n  $: innerWidth = width - (padding.left + padding.right);\n  $: barWidth = innerWidth / y.length - 1.5;\n  $: active_hover = -1\n  $: lock = false\n  var active_lock = 0\n  $: active = (function () {\n    if (lock){\n      var i = Math.round(timeToIndex(active_lock))\n      if (i > 99) {\n        lock = false\n        i = 0\n      } else {\n        return i\n      }\n    } else {\n      return active_hover\n    }\n  })()\n  export let active;\n  export let checked;\n$: checkedReal = [checked[0], checked[3]]\n\n  // var data = [[2   , 2  ], [5   , 2  ], [18  , 4  ], [28  , 6  ], [43  , 8  ], [61  , 12 ], [95  , 16 ], [139 , 19 ], [245 , 26 ], [388 , 34 ], [593 , 43 ], [978 , 54 ], [1501, 66 ], [2336, 77 ], [2922, 92 ], [3513, 107], [4747, 124]]\nvar data = [];\n// the real world data have only deaths, and confirmed. These correspond to elements 0, 2 and 3 in the color array\nvar colorLookup = [0, 3];\n\n// for e.g., Germany set country to \"Germany\" and state to \"\"\n//var country = \"United Kingdom\";\n//var state = \"United Kingdom\";\n//var dataJHU = aggregatedData(country, state);\n//console.log(dataJHU);\nlet dataJHU;\nlet length;\n//onMount(() => {\n    //dataJHU = aggregatedData(country, province);\n    //length = dataJHU.then(function(data) {\n\t//console.log(data.length);\n\t//return data.length;\n   // })\n//});\n//}//);\n\t\n</script>\n\n<style>\n  h2 {\n    text-align: center;\n    font-size: 30px;\n    font-weight: 300;\n    font-family: nyt-franklin,arial,helvetica,sans-serif;\n    font-style: normal; \n  }\n  .chart {\n    width: 100%;\n    max-width: 800px;\n    margin: 0 auto;\n    padding-top:30px;\n    padding-bottom:10px;\n  }\n  svg {\n    position: relative;\n    width: 100%;\n    height: 450px;\n  }\n  .tick {\n    font-family: Helvetica, Arial;\n    font-size: .725em;\n    font-weight: 200;\n  }\n  .tick line {\n    stroke: #e2e2e2;\n    stroke-dasharray: 2;\n  }\n  .tick text {\n    fill: #aaa;\n    text-anchor: start;\n  }\n  .tick.tick-0 line {\n    stroke-dasharray: 0;\n  }\n  .intervention line {\n    stroke: #555;\n    stroke-dasharray: 0;\n    stroke-width:12.5;\n  }\n  .x-axis .tick text {\n    text-anchor: middle;\n  }\n  .bar {\n    stroke: none;\n    opacity: 0.65\n  }\n  .total {\n    color: #888;\n    font-family: Helvetica, Arial;\n    font-size: .725em;\n    font-weight: 200;\n  }\n  a.tip span:before{\n      content:'';\n      display:block;\n      width:0;\n      height:0;\n      position:absolute;\n      border-top: 8px solid transparent;\n      border-bottom: 8px solid transparent;\n      border-right:8px solid black;\n      left:-8px;\n      top:7px;\n  }\n</style>\n\n\n<div style=\"width:{width+15}px; height: {height}px; position: relative; top:20px\">\n  <svg style=\"position:absolute; height: {height}px\" id=\"myGraph\">\n\n    <!-- y axis -->\n    <g class=\"axis y-axis\" transform=\"translate(0,{padding.top})\">\n      {#each yScale.ticks(5) as tick}\n        <g class=\"tick tick-{tick}\" transform=\"translate(0, {yScale(tick) - padding.bottom})\">\n          <line x2=\"100%\"></line>\n          <text y=\"-4\">{Number.isInteger(Math.log10(tick)) ? formatNumber(tick) : (log ? \"\": formatNumber(tick))}{ (tick == yScale.ticks(5)[0]) ? \" \": \"\"}</text>\n        </g>\n      {/each}\n    </g>\n\n    <!-- x axis -->\n    <g class=\"axis x-axis\">\n      {#each xScaleTime.ticks() as i}\n        <g class=\"tick\" transform=\"translate({xScaleTime(i)},{height})\">\n          <text x=\"0\" y=\"-4\">{i == 0 ? \"Day \":\"\"}{i}</text>\n        </g>\n      {/each}\n    </g>\n       \n      {#await countryData then data}\n       <g class='bars'>\n       <!-- Insertion to show real world data -->\n       <!-- y starts from the top -->\n       <!-- the day is in percent of the whole simulation -->\n       <!-- real cases are deaths, recovereds, and confirmed --> \n\n       {#if showJHU}\n       //{console.log(\"Checked Real: \" + checkedReal)}\n       //{console.log(\"Checked: \" + checked)}\n\n       \n       // in the code below, 200 should be replaced by the number of days in the chart\n       // and i*2 should be replaced by i*totalDays/100\n       \n       {#each range(Math.round(data.length*100.0/lastDayInPlot)) as i}\n\n         <rect\n          on:mouseover={() => showTip(i)}\n          on:mouseout={() => showTip(-1)}\n          on:click={() => {lock = !lock; active_lock = indexToTime(i) }}\n          class=\"bar\"\n          x=\"{xScale(i) + 2}\"\n          y=\"{0}\"\n          width=\"{barWidth+3}\"\n          height=\"{height}\"\n          style=\"fill:white; opacity: 0\">     \n       </rect>\n       \n        {#each range(2) as j}\n          {#if !log}\n           {console.log(\"lastDayInPlot: \" + lastDayInPlot)}\n\n\n             <rect\n                on:mouseover={() => showTip(i)}\n                on:mouseout={() => showTip(-1)}\n                on:click={() => {lock = !lock; active_lock = indexToTime(i) }}\n                class=\"bar\"\n                x=\"{xScale(i) + 2}\"\n                y=\"{yScale( sum(data[Math.round(i*lastDayInPlot/100)].slice(0,j+1), checkedReal) )}\"\n                width=\"{barWidth}\"\n                height=\"{Math.max(height - padding.bottom - yScale(data[Math.round(i*lastDayInPlot/100)][j]*checked[colorLookup[j]] ),0)}\" \n                style=\"fill:{colorsJHU[colorLookup[j]]};\n                       opacity:{active == i ? 0.9: 0.6}\">     \n       </rect>\n       {:else}\n             <rect\n                on:mouseover={() => showTip(i)}\n                on:mouseout={() => showTip(-1)}\n                on:click={() => {lock = !lock; active_lock = indexToTime(i) }}\n                class=\"bar\"\n                x=\"{xScale(i) + 2}\"\n                y=\"{(function () { \n                        var z = yScale( sum(data[Math.round(i*lastDayInPlot/100)].slice(0,j+1), checkedReal) ); \n                        return Math.min(isNaN(z) ? 0: z, height - padding.top)\n                      })()  \n                    }\"\n                width=\"{barWidth}\"\n                height=\"{(function () {\n                  var top = yScaleL( sum(data[Math.round(i*lastDayInPlot/100)].slice(0,j+1),checkedReal) + 0.0001 )\n                  var btm = yScaleL( sum(data[Math.round(i*lastDayInPlot/100)].slice(0,j),checkedReal) + 0.0001)\n                  var z = top - btm; \n                  if (z + yScale( sum(data[Math.round(i*lastDayInPlot/100)].slice(0,j+1), checkedReal) ) > height - padding.top) {\n                    return top\n                  } else {\n                    return Math.max(isNaN(z) ? 0 : z,0)\n                  }})()}\" \n                style=\"fill:{colorsJHU[colorLookup[j]]};\n                       opacity:{active == i ? 0.9: 0.6}\">     \n              </rect>\n\n       {/if}\n       \n       \n       {/each}\n       {/each}\n       {console.log(data)}\n       {/if}\n\n       \n\n       {#each myRange(showSIM ? 0 : Math.round(data.length*100.0/lastDayInPlot), y.length) as i}\n\n        <rect\n          on:mouseover={() => showTip(i)}\n          on:mouseout={() => showTip(-1)}\n          on:click={() => {lock = !lock; active_lock = indexToTime(i) }}\n          class=\"bar\"\n          x=\"{xScale(i) + 2}\"\n          y=\"{0}\"\n          width=\"{barWidth+3}\"\n          height=\"{height}\"\n          style=\"fill:white; opacity: 0\">     \n       </rect>\n\n        {#each range(colors.length) as j}\n          {#if !log}\n              <rect\n                on:mouseover={() => showTip(i)}\n                on:mouseout={() => showTip(-1)}\n                on:click={() => {lock = !lock; active_lock = indexToTime(i) }}\n                class=\"bar\"\n                x=\"{xScale(i) + 2}\"\n                y=\"{yScale( sum(y[i].slice(0,j+1), checked) )}\"\n                width=\"{barWidth}\"\n                height=\"{Math.max(height - padding.bottom - yScale(y[i][j]*checked[j] ),0)}\" \n                style=\"fill:{colors[j]};\n                       opacity:{active == i ? 0.9: 0.6}\">     \n              </rect>\n          {:else}\n              <rect\n                on:mouseover={() => showTip(i)}\n                on:mouseout={() => showTip(-1)}\n                on:click={() => {lock = !lock; active_lock = indexToTime(i) }}\n                class=\"bar\"\n                x=\"{xScale(i) + 2}\"\n                y=\"{(function () { \n                        var z = yScale( sum(y[i].slice(0,j+1), checked) ); \n                        return Math.min(isNaN(z) ? 0: z, height - padding.top)\n                      })()  \n                    }\"\n                width=\"{barWidth}\"\n                height=\"{(function () {\n                  var top = yScaleL( sum(y[i].slice(0,j+1),checked) + 0.0001 )\n                  var btm = yScaleL( sum(y[i].slice(0,j),checked) + 0.0001)\n                  var z = top - btm; \n                  if (z + yScale( sum(y[i].slice(0,j+1), checked) ) > height - padding.top) {\n                    return top\n                  } else {\n                    return Math.max(isNaN(z) ? 0 : z,0)\n                  }})()}\" \n                style=\"fill:{colors[j]};\n                       opacity:{active == i ? 0.9: 0.6}\">     \n              </rect>\n          {/if}\n        {/each}\n\n      {/each}\n  \n\n    </g>\n            {/await}\n\n<!-- height=\"{Math.max(height - padding.bottom - yScale(y[i][j]*checked[j] ),0)}\" -->\n\n    <g class='bars'>\n      {#each range(data.length) as i}\n        <rect\n          class=\"bar\"\n          x=\"{xScale( i+28 ) + 2}\"\n          y=\"{yScale( data[i][1] )}\"\n          width=\"{barWidth}\"\n          height=\"{height - padding.bottom - yScale( data[i][1] )}\"\n          style=\"fill:black; \n                 opacity: 0.5;\n                 box-shadow: 4px 10px 5px 2px rgba(0,0,0,0.75);\">     \n        </rect>\n      {/each}\n    </g>\n\n  </svg> \n\n  <div style=\"position: absolute;width:{width+15}px; height: {height}px; position: absolute; top:0px; left:0px; pointer-events: none\">\n    \n    {#if active >= 0}\n      <div style=\"position:absolute; \n                  pointer-events: none;\n                  width:100px;\n                  left:{xScale(active)}px;\n                  top:{Math.max(yScale(sum(y[active], checked)),0) }px\" class=\"tip\"> \n          <!-- {#if lock} <div style=\"position:absolute; top:-35px; left:-3.5px; font-family: Source Code Pro\">🔒</div> {/if} -->\n          <svg style=\"position:absolute; top:-12px; left:0px\" height=\"10\" width=\"10\">\n          <path \n            d=\"M 0 0 L 10 0 L 5 10 z\"\n            fill=\"{lock ? '#555':'#AAA'}\" \n            stroke-width=\"3\" />\n          </svg>\n      </div>\n    {/if}\n\n  </div>\n\n</div>\n",
    "<script>\n  import { beforeUpdate, createEventDispatcher, onDestroy, onMount, tick } from 'svelte';\n\n  const dispatch = createEventDispatcher();\n\n  export let container = undefined;\n\n  import ItemComponent from './Item.svelte';\n  import VirtualList from './VirtualList.svelte';\n\n  export let Item = ItemComponent;\n  export let isVirtualList = false;\n  export let items = [];\n  export let getOptionLabel = (option, filterText) => {\n    if (option) return option.isCreator ? `Create \\\"${filterText}\\\"` : option.label;\n  };\n  export let getGroupHeaderLabel = (option) => { return option.label };\n  export let itemHeight = 40;\n  export let hoverItemIndex = 0;\n  export let selectedValue = undefined;\n  export let optionIdentifier = 'value';\n  export let hideEmptyState = false;\n  export let noOptionsMessage = 'No options';\n  export let isMulti = false;\n  export let activeItemIndex = 0;\n  export let filterText = '';\n\n  let isScrollingTimer = 0;\n  let isScrolling = false;\n  let prev_items;\n  let prev_activeItemIndex;\n  let prev_selectedValue;\n\n  onMount(() => {\n    if (items.length > 0 && !isMulti && selectedValue) {\n      const _hoverItemIndex = items.findIndex((item) => item[optionIdentifier] === selectedValue[optionIdentifier]);\n\n      if (_hoverItemIndex) {\n        hoverItemIndex = _hoverItemIndex;\n      }\n    }\n\n    scrollToActiveItem('active');\n\n\n    container.addEventListener('scroll', () => {\n      clearTimeout(isScrollingTimer);\n\n      isScrollingTimer = setTimeout(() => {\n        isScrolling = false;\n      }, 100);\n    }, false);\n  });\n\n  onDestroy(() => {\n    // clearTimeout(isScrollingTimer);\n  });\n\n  beforeUpdate(() => {\n\n    if (items !== prev_items && items.length > 0) {\n      hoverItemIndex = 0;\n    }\n\n\n    // if (prev_activeItemIndex && activeItemIndex > -1) {\n    //   hoverItemIndex = activeItemIndex;\n\n    //   scrollToActiveItem('active');\n    // }\n    // if (prev_selectedValue && selectedValue) {\n    //   scrollToActiveItem('active');\n\n    //   if (items && !isMulti) {\n    //     const hoverItemIndex = items.findIndex((item) => item[optionIdentifier] === selectedValue[optionIdentifier]);\n\n    //     if (hoverItemIndex) {\n    //       hoverItemIndex = hoverItemIndex;\n    //     }\n    //   }\n    // }\n\n    prev_items = items;\n    prev_activeItemIndex = activeItemIndex;\n    prev_selectedValue = selectedValue;\n  });\n\n  function itemClasses(hoverItemIndex, item, itemIndex, items, selectedValue, optionIdentifier, isMulti) {\n    return `${selectedValue && !isMulti && (selectedValue[optionIdentifier] === item[optionIdentifier]) ? 'active ' : ''}${hoverItemIndex === itemIndex || items.length === 1 ? 'hover' : ''}`;\n  }\n\n  function handleSelect(item) {\n    if (item.isCreator) return;\n    dispatch('itemSelected', item);\n  }\n\n  function handleHover(i) {\n    if (isScrolling) return;\n    hoverItemIndex = i;\n  }\n\n  function handleClick(args) {\n    const { item, i, event } = args;\n    event.stopPropagation();\n\n    if (selectedValue && !isMulti && selectedValue[optionIdentifier] === item[optionIdentifier]) return closeList();\n\n    if (item.isCreator) {\n      dispatch('itemCreated', filterText);\n    } else {\n      activeItemIndex = i;\n      hoverItemIndex = i;\n      handleSelect(item);\n    }\n  }\n\n  function closeList() {\n    dispatch('closeList');\n  }\n\n  async function updateHoverItem(increment) {\n    if (isVirtualList) return;\n\n    let isNonSelectableItem = true;\n\n    while (isNonSelectableItem) {\n      if (increment > 0 && hoverItemIndex === (items.length - 1)) {\n        hoverItemIndex = 0;\n      }\n      else if (increment < 0 && hoverItemIndex === 0) {\n        hoverItemIndex = items.length - 1;\n      }\n      else {\n        hoverItemIndex = hoverItemIndex + increment;\n      }\n\n      isNonSelectableItem = items[hoverItemIndex].isGroupHeader && !items[hoverItemIndex].isSelectable;\n    }\n\n    await tick();\n\n    scrollToActiveItem('hover');\n  }\n\n  function handleKeyDown(e) {\n    switch (e.key) {\n      case 'ArrowDown':\n        e.preventDefault();\n        items.length && updateHoverItem(1);\n        break;\n      case 'ArrowUp':\n        e.preventDefault();\n        items.length && updateHoverItem(-1);\n        break;\n      case 'Enter':\n        e.preventDefault();\n        if (items.length === 0) break;\n        const hoverItem = items[hoverItemIndex];\n        if (selectedValue && !isMulti && selectedValue[optionIdentifier] === hoverItem[optionIdentifier]) {\n          closeList();\n          break;\n        }\n\n        if (hoverItem.isCreator) {\n          dispatch('itemCreated', filterText);\n        } else {\n          activeItemIndex = hoverItemIndex;\n          handleSelect(items[hoverItemIndex]);\n        }\n        break;\n      case 'Tab':\n        e.preventDefault();\n        if (items.length === 0) break;\n        if (selectedValue && selectedValue[optionIdentifier] === items[hoverItemIndex][optionIdentifier]) return closeList();\n        activeItemIndex = hoverItemIndex;\n        handleSelect(items[hoverItemIndex]);\n        break;\n    }\n  }\n\n  function scrollToActiveItem(className) {\n    if (isVirtualList || !container) return;\n\n    let offsetBounding;\n    const focusedElemBounding = container.querySelector(`.listItem .${className}`);\n\n    if (focusedElemBounding) {\n      offsetBounding = container.getBoundingClientRect().bottom - focusedElemBounding.getBoundingClientRect().bottom;\n    }\n\n    container.scrollTop -= offsetBounding;\n  }\n\n  function isItemActive(item, selectedValue, optionIdentifier) {\n    return selectedValue && (selectedValue[optionIdentifier] === item[optionIdentifier]);\n  };\n\n  function isItemFirst(itemIndex) {\n    return itemIndex === 0;\n  };\n\n  function isItemHover(hoverItemIndex, item, itemIndex, items) {\n    return hoverItemIndex === itemIndex || items.length === 1;\n  }\n\n</script>\n\n<svelte:window on:keydown=\"{handleKeyDown}\" />\n\n{#if isVirtualList}\n<div class=\"listContainer virtualList\" bind:this={container}>\n\n  <VirtualList {items} {itemHeight} let:item let:i>\n  \n    <div on:mouseover=\"{() => handleHover(i)}\" on:click=\"{event => handleClick({item, i, event})}\"\n        class=\"listItem\">\n          <svelte:component \n            this=\"{Item}\"\n            {item}\n            {filterText}\n            {getOptionLabel}\n            isFirst=\"{isItemFirst(i)}\"\n            isActive=\"{isItemActive(item, selectedValue, optionIdentifier)}\"\n            isHover=\"{isItemHover(hoverItemIndex, item, i, items)}\"\n          />\n    </div>\n  \n</VirtualList>\n</div>\n{/if}\n\n{#if !isVirtualList}\n<div class=\"listContainer\" bind:this={container}>\n  {#each items as item, i}\n    {#if item.isGroupHeader && !item.isSelectable}\n      <div class=\"listGroupTitle\">{getGroupHeaderLabel(item)}</div>\n    { :else }\n    <div \n      on:mouseover=\"{() => handleHover(i)}\" \n      on:click=\"{event => handleClick({item, i, event})}\"\n      class=\"listItem\"\n    >\n      <svelte:component \n        this=\"{Item}\"\n        {item}\n        {filterText}\n        {getOptionLabel}\n        isFirst=\"{isItemFirst(i)}\"\n        isActive=\"{isItemActive(item, selectedValue, optionIdentifier)}\"\n        isHover=\"{isItemHover(hoverItemIndex, item, i, items)}\"\n      />\n    </div>\n    {/if}\n  {:else}\n    {#if !hideEmptyState}\n      <div class=\"empty\">{noOptionsMessage}</div>\n    {/if}\n  {/each}\n</div>\n{/if}\n\n<style>\n  .listContainer {\n    box-shadow: var(--listShadow, 0 2px 3px 0 rgba(44, 62, 80, 0.24));\n    border-radius: var(--listBorderRadius, 4px);\n    max-height: var(--listMaxHeight, 250px);\n    overflow-y: auto;\n    background: var(--listBackground, #fff);\n  }\n\n  .virtualList {\n    height: var(--virtualListHeight, 200px);\n  }\n\n  .listGroupTitle {\n    color: var(--groupTitleColor, #8f8f8f);\n    cursor: default;\n    font-size: var(--groupTitleFontSize, 12px);\n    height: var(--height, 42px);\n    line-height: var(--height, 42px);\n    padding: var(--groupTitlePadding, 0 20px);\n    text-overflow: ellipsis;\n    overflow-x: hidden;\n    white-space: nowrap;\n    text-transform: var(--groupTitleTextTransform, uppercase);\n  }\n\n  .empty {\n    text-align: var(--listEmptyTextAlign, center);\n    padding: var(--listEmptyPadding, 20px 0);\n    color: var(--listEmptyColor, #78848F);\n  }\n</style>\n",
    "<script>\n  export let isActive = false;\n  export let isFirst = false;\n  export let isHover = false;\n  export let getOptionLabel = undefined;\n  export let item = undefined;\n  export let filterText = '';\n\n  let itemClasses = '';\n\n  $: {\n    const classes = [];\n    if (isActive) { classes.push('active'); }\n    if (isFirst) { classes.push('first'); }\n    if (isHover) { classes.push('hover'); }\n    if (item.isGroupHeader) { classes.push('groupHeader'); }\n    if (item.isGroupItem) { classes.push('groupItem'); }\n    itemClasses = classes.join(' ');\n  }\n</script>\n\n<style>\n  .item {\n    cursor: default;\n    height: var(--height, 42px);\n    line-height: var(--height, 42px);\n    padding: var(--itemPadding, 0 20px);\n    text-overflow: ellipsis;\n    overflow: hidden;\n    white-space: nowrap;\n  }\n\n  .groupHeader {\n    text-transform: var(--groupTitleTextTransform, uppercase);\n  }\n\n  .groupItem {\n    padding-left: 40px;\n  }\n\n  .item:active {\n    background: var(--itemActiveBackground, #b9daff);\n  }\n\n  .item.active {\n    background: var(--itemIsActiveBG, #007aff);\n    color: var(--itemIsActiveColor, #fff);\n  }\n\n  .item.first {\n    border-radius: var(--itemFirstBorderRadius, 4px 4px 0 0);\n  }\n\n  .item.hover:not(.active) {\n    background: var(--itemHoverBG, #e7f2ff);\n  }\n</style>\n\n\n\n<div class=\"item {itemClasses}\">\n  {@html getOptionLabel(item, filterText)}\n</div>\n",
    "<script>\n  export let getSelectionLabel = undefined;\n  export let item = undefined;\n</script>\n\n<style>\n  .selection {\n    text-overflow: ellipsis;\n    overflow-x: hidden;\n    white-space: nowrap;\n  }\n</style>\n\n<div class=\"selection\">\n  {@html getSelectionLabel(item)} \n</div>\n",
    "<script>\n  import { createEventDispatcher } from 'svelte';\n\n  const dispatch = createEventDispatcher();\n\n  export let selectedValue = [];\n  export let activeSelectedValue = undefined;\n  export let isDisabled = false;\n  export let getSelectionLabel = undefined;\n\n  function handleClear(i, event) {\n    event.stopPropagation();\n    dispatch('multiItemClear', {i});\n  }\n</script>\n\n{#each selectedValue as value, i}\n<div class=\"multiSelectItem {activeSelectedValue === i ? 'active' : ''} {isDisabled ? 'disabled' : ''}\">\n  <div class=\"multiSelectItem_label\">\n    {@html getSelectionLabel(value)}\n  </div>\n  {#if !isDisabled}\n  <div class=\"multiSelectItem_clear\" on:click=\"{event => handleClear(i, event)}\">\n    <svg width=\"100%\" height=\"100%\" viewBox=\"-2 -2 50 50\" focusable=\"false\" role=\"presentation\">\n      <path\n        d=\"M34.923,37.251L24,26.328L13.077,37.251L9.436,33.61l10.923-10.923L9.436,11.765l3.641-3.641L24,19.047L34.923,8.124 l3.641,3.641L27.641,22.688L38.564,33.61L34.923,37.251z\"></path>\n    </svg>\n  </div>\n  {/if}\n</div>\n{/each}\n\n\n\n<style>\n  .multiSelectItem {\n    background: var(--multiItemBG, #EBEDEF);\n    margin: var(--multiItemMargin, 5px 5px 0 0);\n    border-radius: var(--multiItemBorderRadius, 16px);\n    height: var(--multiItemHeight, 32px);\n    line-height: var(--multiItemHeight, 32px);\n    display: flex;\n    cursor: default;\n    padding: var(--multiItemPadding, 0 10px 0 15px);\n  }\n\n  .multiSelectItem_label {\n    margin: var(--multiLabelMargin, 0 5px 0 0);\n  }\n\n  .multiSelectItem:hover,\n  .multiSelectItem.active {\n    background-color: var(--multiItemActiveBG, #006FFF);\n    color: var(--multiItemActiveColor, #fff);\n  }\n\n  .multiSelectItem.disabled:hover {\n    background: var(--multiItemDisabledHoverBg, #EBEDEF);\n    color: var(--multiItemDisabledHoverColor, #C1C6CC);\n  }\n\n  .multiSelectItem_clear {\n    border-radius: var(--multiClearRadius, 50%);\n    background: var(--multiClearBG, #52616F);\n    width: var(--multiClearWidth, 16px);\n    height: var(--multiClearHeight, 16px);\n    position: relative;\n    top: var(--multiClearTop, 8px);\n    text-align: var(--multiClearTextAlign, center);\n    padding: var(--multiClearPadding, 1px);\n  }\n\n  .multiSelectItem_clear:hover,\n  .active .multiSelectItem_clear {\n    background: var(--multiClearHoverBG, #fff);\n  }\n\n  .multiSelectItem_clear:hover svg,\n  .active .multiSelectItem_clear svg {\n    fill: var(--multiClearHoverFill, #006FFF);\n  }\n\n  .multiSelectItem_clear svg {\n    fill: var(--multiClearFill, #EBEDEF);\n    vertical-align: top;\n  }\n</style>\n",
    "<script>\n\timport { onMount, tick } from 'svelte';\n\n\t// props\n\texport let items = undefined;\n\texport let height = '100%';\n\texport let itemHeight = 40;\n\texport let hoverItemIndex = 0;\n\n\t// read-only, but visible to consumers via bind:start\n\texport let start = 0;\n\texport let end = 0;\n\n\t// local state\n\tlet height_map = [];\n\tlet rows;\n\tlet viewport;\n\tlet contents;\n\tlet viewport_height = 0;\n\tlet visible;\n\tlet mounted;\n\n\tlet top = 0;\n\tlet bottom = 0;\n\tlet average_height;\n\n\t$: visible = items.slice(start, end).map((data, i) => {\n\t\treturn { index: i + start, data };\n\t});\n\n\t// whenever `items` changes, invalidate the current heightmap\n\t$: if (mounted) refresh(items, viewport_height, itemHeight);\n\n\tasync function refresh(items, viewport_height, itemHeight) {\n\t\tconst { scrollTop } = viewport;\n\n\t\tawait tick(); // wait until the DOM is up to date\n\n\t\tlet content_height = top - scrollTop;\n\t\tlet i = start;\n\n\t\twhile (content_height < viewport_height && i < items.length) {\n\t\t\tlet row = rows[i - start];\n\n\t\t\tif (!row) {\n\t\t\t\tend = i + 1;\n\t\t\t\tawait tick(); // render the newly visible row\n\t\t\t\trow = rows[i - start];\n\t\t\t}\n\n\t\t\tconst row_height = height_map[i] = itemHeight || row.offsetHeight;\n\t\t\tcontent_height += row_height;\n\t\t\ti += 1;\n\t\t}\n\n\t\tend = i;\n\n\t\tconst remaining = items.length - end;\n\t\taverage_height = (top + content_height) / end;\n\n\t\tbottom = remaining * average_height;\n\t\theight_map.length = items.length;\n\n\t\tviewport.scrollTop = 0;\n\t}\n\n\tasync function handle_scroll() {\n\t\tconst { scrollTop } = viewport;\n\n\t\tconst old_start = start;\n\n\t\tfor (let v = 0; v < rows.length; v += 1) {\n\t\t\theight_map[start + v] = itemHeight || rows[v].offsetHeight;\n\t\t}\n\n\t\tlet i = 0;\n\t\tlet y = 0;\n\n\t\twhile (i < items.length) {\n\t\t\tconst row_height = height_map[i] || average_height;\n\t\t\tif (y + row_height > scrollTop) {\n\t\t\t\tstart = i;\n\t\t\t\ttop = y;\n\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\ty += row_height;\n\t\t\ti += 1;\n\t\t}\n\n\t\twhile (i < items.length) {\n\t\t\ty += height_map[i] || average_height;\n\t\t\ti += 1;\n\n\t\t\tif (y > scrollTop + viewport_height) break;\n\t\t}\n\n\t\tend = i;\n\n\t\tconst remaining = items.length - end;\n\t\taverage_height = y / end;\n\n\t\twhile (i < items.length) height_map[i++] = average_height;\n\t\tbottom = remaining * average_height;\n\n\t\t// prevent jumping if we scrolled up into unknown territory\n\t\tif (start < old_start) {\n\t\t\tawait tick();\n\n\t\t\tlet expected_height = 0;\n\t\t\tlet actual_height = 0;\n\n\t\t\tfor (let i = start; i < old_start; i += 1) {\n\t\t\t\tif (rows[i - start]) {\n\t\t\t\t\texpected_height += height_map[i];\n\t\t\t\t\tactual_height += itemHeight || rows[i - start].offsetHeight;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst d = actual_height - expected_height;\n\t\t\tviewport.scrollTo(0, scrollTop + d);\n\t\t}\n\n\t\t// TODO if we overestimated the space these\n\t\t// rows would occupy we may need to add some\n\t\t// more. maybe we can just call handle_scroll again?\n\t}\n\n\t// trigger initial refresh\n\tonMount(() => {\n\t\trows = contents.getElementsByTagName('svelte-virtual-list-row');\n\t\tmounted = true;\n\t});\n</script>\n\n<style>\n\tsvelte-virtual-list-viewport {\n\t\tposition: relative;\n\t\toverflow-y: auto;\n\t\t-webkit-overflow-scrolling: touch;\n\t\tdisplay: block;\n\t}\n\n\tsvelte-virtual-list-contents,\n\tsvelte-virtual-list-row {\n\t\tdisplay: block;\n\t}\n\n\tsvelte-virtual-list-row {\n\t\toverflow: hidden;\n\t}\n</style>\n\n<svelte-virtual-list-viewport bind:this={viewport} bind:offsetHeight={viewport_height} on:scroll={handle_scroll}\n\tstyle=\"height: {height};\">\n\t<svelte-virtual-list-contents bind:this={contents} style=\"padding-top: {top}px; padding-bottom: {bottom}px;\">\n\t\t{#each visible as row (row.index)}\n\t\t\t<svelte-virtual-list-row>\n\t\t\t\t<slot item={row.data} i={row.index} {hoverItemIndex}>Missing template</slot>\n\t\t\t</svelte-virtual-list-row>\n\t\t{/each}\n\t</svelte-virtual-list-contents>\n</svelte-virtual-list-viewport>"
  ],
  "names": [],
  "mappings": "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"
}